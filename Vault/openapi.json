{
    "openapi": "3.0.3",
    "info": {
        "description": "---\nsidebar_position: 1\nsidebar_label: Overview\ndescription: The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault.\nslug: /\n---\n\n# Introduction\n\nThe Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault in a simple, programmatic way using conventional HTTP requests and standard HTTP response codes.\n\nThe API follows RESTful conventions when possible, with most operations performed by `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` requests. Request and response bodies are [JSON-encoded](https://www.json.org/json-en.html). However, for collection operations, an SQL-like [PVSchema](/guides/reference/pvschema) encoding is available.\n\nThis API reference provides details for each operation available in the API.\n\nWhen you install a local copy of Vault, you can try each operation using **Send API request**.\n\nAn OpenAPI specification is available in [YAML](@site/static/assets/openapi.yaml) and [JSON](@site/static/assets/openapi.json) formats and can be used to generate client code for the API.\n",
        "contact": {
            "name": "Us",
            "url": "https://piiano.com/contact-us/"
        },
        "license": {
            "name": "MPL-2.0",
            "url": "https://www.mozilla.org/en-US/MPL/2.0/"
        },
        "title": "Piiano Vault REST API",
        "version": "1.0"
    },
    "servers": [
        {
            "url": "http://localhost:8123"
        }
    ],
    "tags": [
        {
            "description": "Create, retrieve, update, and delete the <a href=\"/guides/manage-collections-and-schemas/about-collections\">collections</a> you use to hold sensitive data.",
            "name": "Collections"
        },
        {
            "description": "Create, retrieve, list, update, and delete the <a href=\"/guides/manage-collections-and-schemas/about-collections\">collection properties</a> that define the data items stored in collections.",
            "name": "Collection properties"
        },
        {
            "description": "A <strong>beta</strong> feature for managing <a href=\"/guides/reference/bundles\">bundles</a> containing JavaScript code used by <a href=\"/guides/reference/custom-data-types\">custom data types</a> to validate, normalize, and transform data.",
            "name": "Bundles"
        },
        {
            "description": "A <strong>beta</strong> feature for managing <a href=\"/guides/reference/custom-data-types\">custom data types</a> you use to validate, normalize, store, and transform your unique data.",
            "name": "Custom data types"
        },
        {
            "description": "Create, retrieve, search, update, and delete the <a href=\"/guides/write-and-read-personal-data/about-objects\">objects</a> that store your sensitive data in collections.",
            "name": "Objects"
        },
        {
            "description": "Tokenize, detokenize, update, rotate, search, and delete non-sensitive <a href=\"/guides/tokenize-personal-data/about-tokens\">tokens</a> referencing sensitive data.",
            "name": "Tokens"
        },
        {
            "description": "A <strong>beta</strong> feature for encrypting, decrypting, and updating encrypted ciphertext.",
            "name": "Crypto"
        },
        {
            "description": "Set and retrieve the <a href=\"/guides/reference/iam-toml\">IAM configuration</a> and <a href=\"/guides/manage-users-and-policies/regenerate-user-api-key\">regenerate user API keys</a>.",
            "name": "IAM"
        },
        {
            "description": "Set and retrieve the dynamic configuration variables that control the behavior of your Vault.",
            "name": "Config Vars"
        },
        {
            "description": "Retrieve details about the status of system components and the Vault version. These operations are unavailable in the hosted version of Vault.",
            "name": "System"
        }
    ],
    "paths": {
        "/api/pvlt/1.0/ctl/collections": {
            "get": {
                "operationId": "list-collections",
                "summary": "List collections",
                "description": "Lists all collections.\n\nThe collections can be returned in JSON or PVSchema format using the `format` query parameter or by setting the `Accept` header to `application/json` or `application/pvschema`, respectively. The default is to return JSON.\n\nSee [PVSchema](/guides/reference/pvschema) for more details on the structure and content of PVSchema.\n\nThe PVSchema format for multiple collections is the PVSchema for each collection string concatenated with a newline.\n\nThe role that performs this operation must have the `CapCollectionsReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/jsonOrPvSchemaFormat"
                    },
                    {
                        "description": "Options for the operation. Options include:\n- `show_builtins` â€“ show built-in properties in the response.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "show_builtins"
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request is successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Collection"
                                    }
                                },
                                "example": [
                                    {
                                        "type": "PERSONS",
                                        "name": "customers",
                                        "properties": [
                                            {
                                                "description": "Date of birth",
                                                "name": "date_of_birth",
                                                "data_type_name": "DATE_OF_BIRTH",
                                                "is_unique": false,
                                                "is_index": false,
                                                "is_encrypted": true,
                                                "is_nullable": true,
                                                "is_builtin": false,
                                                "is_readonly": false,
                                                "creation_time": "2022-12-01T10:04:42.777225Z",
                                                "modification_time": "2022-12-01T10:04:42.777225Z"
                                            },
                                            {
                                                "description": "Email",
                                                "name": "email",
                                                "data_type_name": "EMAIL",
                                                "is_unique": true,
                                                "is_index": true,
                                                "is_encrypted": true,
                                                "is_nullable": true,
                                                "is_builtin": false,
                                                "is_readonly": false,
                                                "creation_time": "2022-12-01T10:04:42.777225Z",
                                                "modification_time": "2022-12-01T10:04:42.777225Z"
                                            },
                                            {
                                                "description": "First name",
                                                "name": "first_name",
                                                "data_type_name": "NAME",
                                                "is_unique": false,
                                                "is_index": false,
                                                "is_encrypted": true,
                                                "is_nullable": false,
                                                "is_builtin": false,
                                                "is_readonly": false,
                                                "creation_time": "2022-12-01T10:04:42.777225Z",
                                                "modification_time": "2022-12-01T10:04:42.777225Z"
                                            },
                                            {
                                                "description": "Last name",
                                                "name": "last_name",
                                                "data_type_name": "NAME",
                                                "is_unique": false,
                                                "is_index": false,
                                                "is_encrypted": true,
                                                "is_nullable": false,
                                                "is_builtin": false,
                                                "is_readonly": false,
                                                "creation_time": "2022-12-01T10:04:42.777225Z",
                                                "modification_time": "2022-12-01T10:04:42.777225Z"
                                            },
                                            {
                                                "description": "Phone number",
                                                "name": "phone_number",
                                                "data_type_name": "PHONE_NUMBER",
                                                "is_unique": true,
                                                "is_index": true,
                                                "is_encrypted": true,
                                                "is_nullable": true,
                                                "is_builtin": false,
                                                "is_readonly": false,
                                                "creation_time": "2022-12-01T10:04:42.777225Z",
                                                "modification_time": "2022-12-01T10:04:42.777225Z"
                                            }
                                        ],
                                        "creation_time": "2022-12-01T10:04:42.777225Z",
                                        "modification_time": "2022-12-01T10:04:42.777225Z"
                                    }
                                ]
                            },
                            "application/pvschema": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collection.pvschema"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "description": "Reserved for future use.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                },
                                "example": {
                                    "error_code": "PV1004",
                                    "message": "The collection is not found.",
                                    "context": {}
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Collections"
                ]
            },
            "post": {
                "operationId": "add-collection",
                "summary": "Add collection",
                "description": "Adds a collection.\n\nThe collection request can be provided in JSON or PVSchema format by setting the `Content-Type` header to `application/json` or `application/pvschema`, respectively. The collection can be returned in JSON or PVSchema format using the `format` query parameter or by setting the `Accept` header to `application/json` or `application/pvschema`, respectively. The default is to return JSON.\n\nSee [PVSchema](/guides/reference/pvschema) for more details on the structure and content of PVSchema.\n\nInvalid optional `properties` attributes in a JSON request are ignored.\n\n:::note\nThe combined length of the collection name and the longest property name can not exceed 40 characters.\n:::\n\nThe role performing this operation must have the `CapCollectionsWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/jsonOrPvSchemaFormat"
                    },
                    {
                        "description": "Options for the operation. Options include:\n- `show_builtins` â€“ show built-in properties in the response.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "show_builtins"
                                ]
                            }
                        }
                    }
                ],
                "requestBody": {
                    "x-has-pii": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Collection"
                            }
                        },
                        "application/pvschema": {
                            "schema": {
                                "$ref": "#/components/schemas/Collection.pvschema"
                            }
                        }
                    },
                    "description": "Details of the collection including its properties.",
                    "required": true,
                    "x-originalParamName": "collection"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collection"
                                },
                                "example": {
                                    "type": "PERSONS",
                                    "name": "customers",
                                    "properties": [
                                        {
                                            "description": "Date of birth",
                                            "name": "date_of_birth",
                                            "data_type_name": "DATE_OF_BIRTH",
                                            "is_unique": false,
                                            "is_index": false,
                                            "is_encrypted": true,
                                            "is_nullable": true,
                                            "is_builtin": false,
                                            "is_readonly": false,
                                            "creation_time": "2022-12-01T10:04:42.777225Z",
                                            "modification_time": "2022-12-01T10:04:42.777225Z"
                                        },
                                        {
                                            "description": "Email",
                                            "name": "email",
                                            "data_type_name": "EMAIL",
                                            "is_unique": true,
                                            "is_index": true,
                                            "is_encrypted": true,
                                            "is_nullable": true,
                                            "is_builtin": false,
                                            "is_readonly": false,
                                            "creation_time": "2022-12-01T10:04:42.777225Z",
                                            "modification_time": "2022-12-01T10:04:42.777225Z"
                                        },
                                        {
                                            "description": "First name",
                                            "name": "first_name",
                                            "data_type_name": "NAME",
                                            "is_unique": false,
                                            "is_index": false,
                                            "is_encrypted": true,
                                            "is_nullable": false,
                                            "is_builtin": false,
                                            "is_readonly": false,
                                            "creation_time": "2022-12-01T10:04:42.777225Z",
                                            "modification_time": "2022-12-01T10:04:42.777225Z"
                                        },
                                        {
                                            "description": "Last name",
                                            "name": "last_name",
                                            "data_type_name": "NAME",
                                            "is_unique": false,
                                            "is_index": false,
                                            "is_encrypted": true,
                                            "is_nullable": false,
                                            "is_builtin": false,
                                            "is_readonly": false,
                                            "creation_time": "2022-12-01T10:04:42.777225Z",
                                            "modification_time": "2022-12-01T10:04:42.777225Z"
                                        },
                                        {
                                            "description": "Phone number",
                                            "name": "phone_number",
                                            "data_type_name": "PHONE_NUMBER",
                                            "is_unique": true,
                                            "is_index": true,
                                            "is_encrypted": true,
                                            "is_nullable": true,
                                            "is_builtin": false,
                                            "is_readonly": false,
                                            "creation_time": "2022-12-01T10:04:42.777225Z",
                                            "modification_time": "2022-12-01T10:04:42.777225Z"
                                        }
                                    ],
                                    "creation_time": "2022-12-01T10:04:42.777225Z",
                                    "modification_time": "2022-12-01T10:04:42.777225Z"
                                }
                            },
                            "application/pvschema": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collection.pvschema"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "description": "Reserved for future use.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                },
                                "example": {
                                    "error_code": "PV1004",
                                    "message": "The collection is not found.",
                                    "context": {}
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Collections"
                ]
            }
        },
        "/api/pvlt/1.0/ctl/bundles": {
            "get": {
                "operationId": "list-bundles",
                "summary": "List bundles",
                "description": "Lists the Vault bundles.\n\nThe role that performs this operation must have the `CapCodeReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Bundle"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Bundles"
                ]
            },
            "post": {
                "operationId": "add-bundle",
                "summary": "Add a bundle",
                "description": "Adds a bundle.\n\nThe role performing this operation must have the `CapCodeWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "requestBody": {
                    "x-has-pii": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Bundle"
                            },
                            "example": {
                                "name": "example_bundle",
                                "description": "An example bundle that exports a validator, normalizer, and transformer",
                                "code": "U2FtcGxlIGNvZGU="
                            }
                        }
                    },
                    "description": "Details of the bundle including the code that defines the functions as properties of the exports object.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bundle"
                                },
                                "example": {
                                    "name": "example_bundle",
                                    "description": "An example bundle that exports a validator, normalizer, and transformer",
                                    "exports": {
                                        "validators": [
                                            {
                                                "name": "is_positive",
                                                "type": "validator",
                                                "description": "A validator that returns true if its argument is positive.",
                                                "dependencies": {
                                                    "properties": [],
                                                    "http_get_access": [],
                                                    "http_post_access": []
                                                }
                                            }
                                        ],
                                        "normalizers": [
                                            {
                                                "name": "to_lower",
                                                "type": "normalizer",
                                                "description": "A normalizer that formats a string to lowercase without any dependencies."
                                            }
                                        ],
                                        "transformers": [
                                            {
                                                "name": "to_name_with_title",
                                                "type": "transformer",
                                                "description": "A transformer that accepts a full name and returns it prepended with a title.",
                                                "dependencies": {
                                                    "properties": [
                                                        "gender",
                                                        "marital_status"
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "code": "U2FtcGxlIGNvZGU=",
                                    "creation_time": "2022-12-02T02:02:14.398599Z"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "description": "Reserved for future use.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                },
                                "example": {
                                    "error_code": "PV1004",
                                    "message": "The bundle is not found.",
                                    "context": {}
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Bundles"
                ]
            }
        },
        "/api/pvlt/1.0/ctl/types": {
            "get": {
                "operationId": "list-data-types",
                "summary": "List data types",
                "description": "Lists the Vault data types.\n\nSee Data types for more information.\n\nThe role that performs this operation must have the `CapTypesReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "parameters": [
                    {
                        "description": "If provided, return only types that depend on the bundle with the specified name.",
                        "in": "query",
                        "name": "bundle",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Options for the operation. Options include:\n - `show_builtins` â€“ show built-in properties.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "show_builtins"
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DataType"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Custom data types"
                ]
            },
            "post": {
                "operationId": "add-data-type",
                "summary": "Add data type",
                "description": "Adds a data type.\n\nThe role performing this operation must have the `CapTypesWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "requestBody": {
                    "x-has-pii": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataType"
                            },
                            "example": {
                                "name": "student_id",
                                "base_type_name": "STRING",
                                "description": "A custom data type representing a student ID based on the built-in STRING type.",
                                "validator": {
                                    "bundle": "example_bundle",
                                    "function": "validate_student_id"
                                },
                                "normalizer": "example_bundle.normalize_student_id",
                                "transformers": [
                                    "example_bundle.format_student_id",
                                    "example_bundle.mask_first_4_digits"
                                ],
                                "default_transformer": "example_bundle.format_student_id"
                            }
                        }
                    },
                    "description": "Details of the data type, including the names and locations of the JavaScript functions it uses.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataType"
                                },
                                "example": {
                                    "name": "student_id",
                                    "base_type_name": "STRING",
                                    "description": "A custom data type representing a student ID based on the built-in STRING type.",
                                    "validator": "example_bundle.validate_student_id",
                                    "normalizer": "example_bundle.normalize_student_id",
                                    "transformers": [
                                        "example_bundle.format_student_id",
                                        "example_bundle.mask_first_4_digits"
                                    ],
                                    "default_transformer": "example_bundle.format_student_id",
                                    "creation_time": "2022-12-01T10:04:42.777225Z"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "description": "Reserved for future use.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                },
                                "example": {
                                    "error_code": "PV1004",
                                    "message": "The data type is not found.",
                                    "context": {}
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Custom data types"
                ]
            }
        },
        "/api/pvlt/1.0/data/collections/{collection}/count/objects": {
            "get": {
                "operationId": "get-objects-count",
                "summary": "Get object count",
                "description": "Gets the number of objects in a collection.\n\nThe role performing this operation must have at least one allowing policy and no denying policies for the `stats` operation.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how Vault uses policies to control access to data.",
                "parameters": [
                    {
                        "description": "The name of the collection containing the objects.",
                        "in": "path",
                        "name": "collection",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$"
                        },
                        "example": "customers"
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Count"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Objects"
                ]
            }
        },
        "/api/pvlt/1.0/data/collections/{collection}/count/tokens": {
            "get": {
                "operationId": "get-tokens-count",
                "summary": "Get token count",
                "description": "Gets the number of tokens in a collection.\n\nThe role performing this operation must have at least one allowing policy and no denying policies for the `stats` operation.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how Vault uses policies to control access to data.",
                "parameters": [
                    {
                        "description": "The name of the collection containing the tokens.",
                        "in": "path",
                        "name": "collection",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$"
                        },
                        "example": "customers"
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Count"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Tokens"
                ]
            }
        },
        "/api/pvlt/1.0/data/collections/{collection}/objects": {
            "get": {
                "operationId": "list-objects",
                "summary": "List objects",
                "description": "Returns a [paginated list](/api/api-pagination) of objects from a collection with all or a subset of object property values. To encrypt object property values, set export to true. Values are encrypted using the key specified in the [PVAULT_KMS_EXPORT_URI or PVAULT_KMS_EXPORT_SEED environment variables](/guides/configure/environment-variables#key-management-service).\n\nThe role performing this operation must have both of the following:\n- The `CapDataReader` capability.\n- At least one allowing policy and no denying policies for the `read` operation for each of the properties and the\n  collection requested in the call.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how\ncapabilities are used to control access to operations and policies are used to control access to data.\n\n**Warning**: Use of the `unsafe` option, to include all object property values, may expose more private information than is required, use with caution.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    },
                    {
                        "$ref": "#/components/parameters/page_size"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/export"
                    },
                    {
                        "$ref": "#/components/parameters/trans_param"
                    },
                    {
                        "description": "A comma-separated list of object IDs",
                        "in": "query",
                        "name": "ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "description": "Options for the operation. Options include:\n- `archived` â€“ whether to list only archived objects. If not specified, list only active objects.\n- `show_builtins` â€“ show built-in properties, can only be specified with `unsafe`.\n- `unsafe` â€“ fetch all the properties, cannot be specified with `props`.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "unsafe",
                                    "show_builtins",
                                    "archived"
                                ]
                            }
                        }
                    },
                    {
                        "$ref": "#/components/parameters/props"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectFieldsPage"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The collection, properties, or object is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Objects"
                ]
            },
            "post": {
                "operationId": "add-object",
                "summary": "Add object",
                "description": "Adds an object to a collection. The request must include all the non-nullable properties, as defined by the [collection schema](/api/operations/list-collection-properties).\n\nWhen adding an object from an external system that uses UUID IDs, you can include the object ID in the request to set the ID in Vault. For example, `\"id\",\"463a83d0-a816-4902-abba-2486e0c0a0bb\"`. Vault normalizes the ID to lowercase.\n\nIf the object to add is exported from an external system or Vault:\n- set `import` to `true` to import values for the built-in properties `_creation_time`, `_modification_time`, and `_expiration_time`. \n- if the data is encrypted, to decrypt the data provide the encryption key in `export_key`.\n\nThe role performing this operation must have both of the following:\n- The `CapDataWriter` capability.\n- At least one allowing policy and no denying policies for the `write` operation for each of the collection properties\n  provided in the call.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how\ncapabilities are used to control access to operations and policies are used to control access to data.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    },
                    {
                        "description": "Object expiration time in seconds, cannot be set to 0. If not set, the default value is used. See the `PVAULT_EXPIRATION_ASSOCIATED_OBJECTS` and `PVAULT_EXPIRATION_UNASSOCIATED_OBJECTS` environment variables. If set to an empty value, the token will be marked to not expire.",
                        "in": "query",
                        "name": "expiration_secs",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[0-9]*$"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/import"
                    },
                    {
                        "$ref": "#/components/parameters/export_key"
                    }
                ],
                "requestBody": {
                    "x-has-pii": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ObjectFields"
                            }
                        }
                    },
                    "description": "The object details.",
                    "required": true,
                    "x-originalParamName": "object"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectID"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The collection or properties is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Objects"
                ]
            }
        },
        "/api/pvlt/1.0/data/collections/{collection}/tokens": {
            "post": {
                "operationId": "tokenize",
                "summary": "Tokenize",
                "description": "Creates a token that reference the values of an object's properties. The token ID is partially or wholly randomly-generated and, therefore, is not sensitive. Supports bulk operations.\n\nThe returned token IDs are in the same order as the object IDs in the request. No tokens are created if any object IDs are invalid or not found.\n\nIf this operation is called for an object ID and properties that have a token:\n- Any token tags are appended to the existing token.\n- If an expiration is specified, then the token expiry is updated. If an expiration is not specified, the token expiry is updated if the default settings result in an expiry date after the token's current expiry date.\n\nThe operation can optionally include a transaction ID. This is an arbitrary string included in the request using the `transaction_id` query parameter. If a transaction ID is included, the token is associated with the transaction ID. The transaction ID can be used to retrieve the token ID by calling the [get by transaction ID](/api/operations/get-by-transaction-id) operation. A transaction ID is unique to the operation and collection. It cannot be used again on future calls to the `tokenize` operation on the same collection. If multiple tokens are created in the `tokenize` operation (bulk), all the tokens are associated with the transaction ID.\n\nThe role performing this operation must have both of these:\n- The `CapTokensWriter` capability.\n- At least one allowing policy and no denying policies for the `tokenize` operation for each of the collection properties specified in the call.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.\n",
                "parameters": [
                    {
                        "description": "Token expiration time in seconds. If not set, the default expiration time is used. See the `PVAULT_EXPIRATION_TOKENS` variable. If set to an empty value, the token will be marked to not expire.",
                        "in": "query",
                        "name": "expiration_secs",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[0-9]*$"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "$ref": "#/components/parameters/transaction_id"
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    }
                ],
                "requestBody": {
                    "x-has-pii": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                    "$ref": "#/components/schemas/TokenizeRequest"
                                }
                            },
                            "example": [
                                {
                                    "type": "pointer",
                                    "object": {
                                        "id": "cc9a39c5-4734-4786-b317-e16705d5128f"
                                    },
                                    "props": [
                                        "phone_number"
                                    ]
                                }
                            ]
                        }
                    },
                    "description": "Details of the tokenization request.",
                    "required": true,
                    "x-originalParamName": "object_prop"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/TokenValue"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                },
                                "example": {
                                    "objectid": "credit_cadr",
                                    "error_code": "PV3003",
                                    "message": "One or more values are invalid."
                                }
                            }
                        },
                        "description": "The collection, objects, or properties aren't found or are missing."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Tokens"
                ]
            },
            "get": {
                "operationId": "detokenize",
                "summary": "Detokenize tokens",
                "description": "Returns the object property values for tokens.\n\nThe tokens returned by this operation are defined using three query parameters: `token_ids`, `object_ids`, and `tags`. The operation returns an empty response if it finds no matches. See the [Retrieve a token](/guides/tokenize-personal-data/retrieve-a-token) guide for more information about how to match tokens for this operation.\n\nThe role performing this operation must have all of these:\n- The `CapTokensDetokenizer` capability.\n- Policies:\n  + At least one allowing policy and no denying policies for the `detokenize` operation for each of the collection properties that are tokenized by tokens specified in the query.\n  + At least one allowing policy and no denying policies for the `read` operation for each of the collection properties that are tokenized by tokens specified in the query.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.\n",
                "parameters": [
                    {
                        "description": "Comma-separated list of object IDs.",
                        "in": "query",
                        "name": "object_ids",
                        "schema": {
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            },
                            "type": "array"
                        }
                    },
                    {
                        "description": "Comma-separated list of tags.",
                        "in": "query",
                        "name": "tags",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/Tag"
                            }
                        }
                    },
                    {
                        "description": "Comma-separated list of token IDs.",
                        "in": "query",
                        "name": "token_ids",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/props"
                    },
                    {
                        "description": "Options for the operation. Options include:\n- `include_metadata` - show token metadata in the response.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "include_metadata"
                                ]
                            }
                        }
                    },
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DetokenizedToken"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Tokens"
                ]
            },
            "delete": {
                "operationId": "delete-tokens",
                "summary": "Delete tokens",
                "description": "Deletes tokens.\n\nThe tokens deleted are those that match all the criteria in the `token_ids`, `object_ids`,  `tags`, and `tenant_id` parameters. `tenant_id` is matched against the tenant ID of the object owning the token. If the token query finds no matches, the operation returns a 404 error. See [delete tokens](/guides/tokenize-personal-data/delete-a-token) for more details.\n\nThe role performing this operation must have both of these:\n- The `CapTokensWriter` capability.\n- At least one allowing policy and no denying policies for the `delete` operation for the `tokens` resource of the specified collection.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.\n",
                "parameters": [
                    {
                        "description": "Comma-separated list of object IDs.",
                        "in": "query",
                        "name": "object_ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "description": "Comma-separated list of tags.",
                        "in": "query",
                        "name": "tags",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "Comma-separated list of token IDs.",
                        "in": "query",
                        "name": "token_ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "A Tenant ID. Can only be provided as an additional filter to `tokens_ids`, `object_ids`, or `tags`.",
                        "in": "query",
                        "name": "tenant_id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Options for the operation. Options include:\n- `archived` â€“ whether to delete only archived tokens. If not specified, delete only active tokens.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "archived"
                                ]
                            }
                        }
                    },
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                },
                                "example": {
                                    "error_code": "PV3009",
                                    "message": "The token is not found."
                                }
                            }
                        },
                        "description": "The collection or reason aren't found or are missing, the `reason` is set to `other` but no `adhoc_reason` is provided, no token query parameters are provided, or the query finds no matching tokens."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Tokens"
                ]
            },
            "patch": {
                "operationId": "update-tokens",
                "summary": "Update tokens",
                "description": "Updates `tags` and `expiration` token metadata.\n\nThe role performing this operation must have both of these:\n- The `CapTokensWriter` capability.\n- At least one allowing policy and no denying policies for the `write` operation for the `tokens` resource of the collection specified in the call.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.\n\nThe tokens returned by this operation are defined using three query parameters: `token_ids`, `object_ids`, and `tags`. If no tokens are matched, status code 404 is returned. See the [Retrieve a token](/guides/tokenize-personal-data/retrieve-a-token) guide for more information about how to match tokens for this operation.\n",
                "parameters": [
                    {
                        "description": "Expiration time in seconds for the tokens. If not set, the expiry dates of the tokens are not changed.  If set to an empty value, the token will be marked to not expire.'",
                        "in": "query",
                        "name": "expiration_secs",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[0-9]*$"
                        }
                    },
                    {
                        "description": "Comma-separated list of object IDs.",
                        "in": "query",
                        "name": "object_ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "description": "Comma-separated list of tags.",
                        "in": "query",
                        "name": "tags",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "Comma-separated list of token IDs.",
                        "in": "query",
                        "name": "token_ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "Options for the operation. Options include:\n- `archived` â€“ whether to update only archived tokens. If not specified, update only active tokens.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "archived"
                                ]
                            }
                        }
                    },
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    }
                ],
                "requestBody": {
                    "x-has-pii": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTokenRequest"
                            }
                        }
                    },
                    "description": "Update token request details.",
                    "required": true,
                    "x-originalParamName": "body"
                },
                "responses": {
                    "200": {
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                },
                                "example": {
                                    "error_code": "PV3009",
                                    "message": "The token is not found."
                                }
                            }
                        },
                        "description": "The collection or reason aren't found or are missing, the `reason` is set to `other` but no `adhoc_reason` is provided, no token query parameters are provided, or the query finds no matching tokens."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Tokens"
                ]
            }
        },
        "/api/pvlt/1.0/data/collections/{collection}/encrypt/objects": {
            "post": {
                "operationId": "encrypt",
                "summary": "Encrypt",
                "description": "Creates ciphertext that includes the values of an object's properties. Supports bulk operations.\n\nYou can encrypt:\n\n1. Objects stored in Vault by providing their ID. \n2. Fields not stored in Vault by providing a map of their properties and property values. However, fields must conform to the collection schema specified in the request. \n3. Ciphertext. This enables you to create a ciphertext including a subset of another ciphertext's properties or with a different encryption type or scope. To update the property values, use the [update encrypted](/api/operations/update-encrypted) operation.\n\n:bulb: For brevity, this guide uses the term `object` to refer to the content being encrypted.\n\nIf any request details are invalid, none of the objects are encrypted.\n\nYou can generate ciphertext for the encrypted object with a random initialization vector (randomized) or based on the collection name, input object, and scope (deterministic).\n\nUsing `props`, you can request that the ciphertext include a subset of the collection schema's properties.  However, if a property isn't present in the object or the property value is null, it is not included in the encrypted ciphertext. Also, if you want to include built-in properties, you must include them in `props`.\n\nThe role performing this operation must have both of these:\n\n- The `CapCryptoEncrypter` capability.\n- At least one allowing policy and no denying policies for the `encrypt` operation for each of the collection properties specified in the call.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how Vault uses capabilities to control access to operations and policies to control access to data.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "description": "Encrypted object expiration time in seconds. If not set, the default expiration time is used. See the `PVAULT_EXPIRATION_TOKENS` variable. If set to an empty value, the encrypted will be marked to not expire.",
                        "in": "query",
                        "name": "expiration_secs",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[0-9]*$"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    }
                ],
                "requestBody": {
                    "x-has-pii": true,
                    "description": "Details of the encryption request.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/EncryptionRequest"
                                }
                            },
                            "example": [
                                {
                                    "object": {
                                        "fields": {
                                            "email": "john@work.com",
                                            "phone_number": "555-555-5555"
                                        }
                                    },
                                    "props": [
                                        "phone_number",
                                        "email"
                                    ]
                                }
                            ]
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EncryptedValue"
                                    }
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                },
                                "example": {
                                    "objectid": "credit_cadr",
                                    "error_code": "PV3003",
                                    "message": "One or more values are invalid."
                                }
                            }
                        },
                        "description": "The collection or properties aren't found, or property values are invalid."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Crypto"
                ]
            },
            "patch": {
                "operationId": "update-encrypted",
                "summary": "Update ciphertext and metadata",
                "description": "Returns ciphertext that includes property values from another ciphertext. Supports bulk operations.\n\nThis enables the creation of encrypted ciphertext without exposing encrypted property values to the user. \n\nThe returned ciphertext can have different encryption type, scope, properties, or property values to the source ciphertext. Any property values in the source ciphertext not updated in the request are preserved in the new ciphertext as long as they are included in `props`.\n\nFor example, if the source ciphertext contains `first_name`, `last_name`, and `telephone_number` and `props` specifies `[first_name, last_name]`, then `telephone_number` isn't included in the new encrypted ciphertext.\n\nThe request must include the scope used to encrypt the source ciphertext.\n\nIf any request details are invalid, no ciphertexts are created.\n\nThe role performing this operation must have both of these:\n\n- The `CapCryptoDecrypter` and `CapCryptoEncrypter` capabilities.\n- At least one allowing policy and no denying policies for the `decrypt` and `encrypt` operations for each of the collection properties specified in the call.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how Vault uses capabilities to control access to operations and policies to control access to data.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "description": "Options for the request.\n- `archived` - whether to update only archived encrypted objects. If not specified, update only active encrypted objects.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "archived"
                                ]
                            }
                        }
                    },
                    {
                        "description": "Encrypted object expiration time in seconds. If not set, the default expiration time is used. See the `PVAULT_EXPIRATION_TOKENS` variable.",
                        "in": "query",
                        "name": "expiration_secs",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[0-9]*$"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    }
                ],
                "requestBody": {
                    "x-has-pii": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/UpdateEncryptionRequest"
                                }
                            }
                        }
                    },
                    "description": "Details of the update encrypted object request.\nThe request includes the encrypted object to update and the property values to update the encrypted object with.\n",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EncryptedValue"
                                    }
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                },
                                "example": {
                                    "objectid": "credit_card",
                                    "error_code": "PV3003",
                                    "message": "One or more values are invalid."
                                }
                            }
                        },
                        "description": "The collection or properties aren't found, or property values are invalid."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Crypto"
                ]
            }
        },
        "/api/pvlt/1.0/ctl/collections/{collection}": {
            "get": {
                "operationId": "get-collection",
                "summary": "Get collection",
                "description": "Gets a collection and its properties.\n\nThe collection details can be returned in JSON or PVSchema format using the `format` query parameter or by setting the `Accept` header to `application/json` or `application/pvschema`, respectively. The default is to return JSON.\n\nSee [PVSchema](/guides/reference/pvschema) for more details on the structure and content of PVSchema.\n\nThe role that performs this operation must have the `CapCollectionsReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "$ref": "#/components/parameters/jsonOrPvSchemaFormat"
                    },
                    {
                        "description": "Options for the operation. Options include:\n- `show_builtins` â€“ show built-in properties in the response.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "show_builtins"
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collection"
                                },
                                "example": {
                                    "type": "PERSONS",
                                    "name": "customers",
                                    "properties": [
                                        {
                                            "description": "Date of birth",
                                            "name": "date_of_birth",
                                            "data_type_name": "DATE_OF_BIRTH",
                                            "is_unique": false,
                                            "is_index": false,
                                            "is_encrypted": true,
                                            "is_nullable": true,
                                            "is_builtin": false,
                                            "is_readonly": false,
                                            "creation_time": "2022-12-01T10:04:42.777225Z",
                                            "modification_time": "2022-12-01T10:04:42.777225Z"
                                        },
                                        {
                                            "description": "Email",
                                            "name": "email",
                                            "data_type_name": "EMAIL",
                                            "is_unique": true,
                                            "is_index": true,
                                            "is_encrypted": true,
                                            "is_nullable": true,
                                            "is_builtin": false,
                                            "is_readonly": false,
                                            "creation_time": "2022-12-01T10:04:42.777225Z",
                                            "modification_time": "2022-12-01T10:04:42.777225Z"
                                        },
                                        {
                                            "description": "First name",
                                            "name": "first_name",
                                            "data_type_name": "NAME",
                                            "is_unique": false,
                                            "is_index": false,
                                            "is_encrypted": true,
                                            "is_nullable": false,
                                            "is_builtin": false,
                                            "is_readonly": false,
                                            "creation_time": "2022-12-01T10:04:42.777225Z",
                                            "modification_time": "2022-12-01T10:04:42.777225Z"
                                        },
                                        {
                                            "description": "Last name",
                                            "name": "last_name",
                                            "data_type_name": "NAME",
                                            "is_unique": false,
                                            "is_index": false,
                                            "is_encrypted": true,
                                            "is_nullable": false,
                                            "is_builtin": false,
                                            "is_readonly": false,
                                            "creation_time": "2022-12-01T10:04:42.777225Z",
                                            "modification_time": "2022-12-01T10:04:42.777225Z"
                                        },
                                        {
                                            "description": "Phone number",
                                            "name": "phone_number",
                                            "data_type_name": "PHONE_NUMBER",
                                            "is_unique": true,
                                            "is_index": true,
                                            "is_encrypted": true,
                                            "is_nullable": true,
                                            "is_builtin": false,
                                            "is_readonly": false,
                                            "creation_time": "2022-12-01T10:04:42.777225Z",
                                            "modification_time": "2022-12-01T10:04:42.777225Z"
                                        }
                                    ],
                                    "creation_time": "2022-12-01T10:04:42.777225Z",
                                    "modification_time": "2022-12-01T10:04:42.777225Z"
                                }
                            },
                            "application/pvschema": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collection.pvschema"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The collection is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Collections"
                ]
            },
            "patch": {
                "operationId": "update-collection",
                "summary": "Update collection",
                "description": "Updates properties of a collection.\n\nThe update includes:\n- Adding any properties in the request that are not in the collection.\n- Amending the `description`, `is_index`, and `is_nullable` attributes, where they have changed, for any properties in the request that are in the collection. `is_nullable` can only be changed from `false` to `true`. All other attributes of existing properties are ignored.\n\n:::note\nThe combined length of the collection name and the longest property name can not exceed 40 characters.\n:::\n\nThe collection request can be provided in JSON or PVSchema format by setting the `Content-Type` header to `application/json` or `application/pvschema`, respectively. The collection can be returned in JSON or PVSchema format using the `format` query parameter or by setting  the  `Accept` header to `application/json` or `application/pvschema`, respectively. The default is to return JSON.\n\nSee [PVSchema](/guides/reference/pvschema) for more details on the structure and content of PVSchema.\n\nThe collection name provided in the path parameter must match the collection name in the JSON or PVSchema.\n\nThe response contains the collection with all the properties.\n\n:::info\nThis command may take a while to complete (e.g. when adding an index) and is excluded from Vault's standard call timeout.\n:::\n\nThe role that performs this operation must have the `CapCollectionsWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "$ref": "#/components/parameters/jsonOrPvSchemaFormat"
                    },
                    {
                        "description": "Options for the operation. Options include:\n- `show_builtins` â€“ show built-in properties in the response.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "show_builtins"
                                ]
                            }
                        }
                    }
                ],
                "requestBody": {
                    "x-has-pii": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Collection"
                            },
                            "example": {
                                "type": "PERSONS",
                                "name": "customers",
                                "properties": [
                                    {
                                        "description": "Social Security Number",
                                        "name": "ssn",
                                        "data_type_name": "SSN",
                                        "is_unique": true,
                                        "is_index": true,
                                        "is_encrypted": true,
                                        "is_nullable": true,
                                        "is_builtin": false,
                                        "is_readonly": false,
                                        "creation_time": "2023-01-25T17:31:40.291033Z",
                                        "modification_time": "2023-01-25T17:31:40.291033Z"
                                    }
                                ],
                                "creation_time": "2023-01-25T16:21:48.308234Z",
                                "modification_time": "2023-01-25T16:21:48.308234Z"
                            }
                        },
                        "application/pvschema": {
                            "schema": {
                                "type": "string"
                            },
                            "example": "customers PERSONS (\n  ssn SSN NULL UNIQUE INDEX COMMENT 'Social Security Number',\n);"
                        }
                    },
                    "description": "Details of the collection, including its properties.",
                    "required": true,
                    "x-originalParamName": "collectionChanges"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Collection"
                                },
                                "example": {
                                    "type": "PERSONS",
                                    "name": "customers",
                                    "properties": [
                                        {
                                            "description": "Social Security Number",
                                            "name": "ssn",
                                            "data_type_name": "ssn",
                                            "is_unique": true,
                                            "is_index": true,
                                            "is_encrypted": true,
                                            "is_nullable": true,
                                            "is_builtin": false,
                                            "is_readonly": false,
                                            "creation_time": "2022-12-01T10:20:47.115228Z",
                                            "modification_time": "2022-12-01T10:20:47.115228Z"
                                        }
                                    ],
                                    "creation_time": "2022-12-01T09:45:03.015895Z",
                                    "modification_time": "2022-12-01T09:45:03.015895Z"
                                }
                            },
                            "application/pvschema": {
                                "schema": {
                                    "type": "string"
                                },
                                "example": "customers PERSONS (\n  ssn SSN NULL UNIQUE INDEX COMMENT 'Social Security Number',\n);"
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The collection is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "501": {
                        "$ref": "#/components/responses/501"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Collections"
                ]
            },
            "delete": {
                "operationId": "delete-collection",
                "summary": "Delete collection",
                "description": "Deletes a collection.\n\nThe role that performs this operation must have the `CapCollectionsWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The collection is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Collections"
                ]
            }
        },
        "/api/pvlt/1.0/ctl/collections/{collection}/properties": {
            "get": {
                "operationId": "list-collection-properties",
                "summary": "List collection properties",
                "description": "Lists the properties of a collection.\n\nThe role that performs this operation must have the `CapCollectionsReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "description": "Options for the operation. Options include: \n- `show_builtins` â€“ show built-in properties in the response.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "show_builtins"
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Property"
                                    },
                                    "type": "array"
                                },
                                "example": [
                                    {
                                        "description": "Date of birth",
                                        "name": "date_of_birth",
                                        "data_type_name": "DATE_OF_BIRTH",
                                        "is_unique": false,
                                        "is_index": false,
                                        "is_encrypted": true,
                                        "is_nullable": true,
                                        "is_builtin": false,
                                        "is_readonly": false,
                                        "creation_time": "2023-01-25T16:21:48.308234Z",
                                        "modification_time": "2023-01-25T16:21:48.308234Z"
                                    },
                                    {
                                        "description": "Email",
                                        "name": "email",
                                        "data_type_name": "EMAIL",
                                        "is_unique": true,
                                        "is_index": true,
                                        "is_encrypted": true,
                                        "is_nullable": true,
                                        "is_builtin": false,
                                        "is_readonly": false,
                                        "creation_time": "2023-01-25T16:21:48.308234Z",
                                        "modification_time": "2023-01-25T16:21:48.308234Z"
                                    },
                                    {
                                        "description": "First name",
                                        "name": "first_name",
                                        "data_type_name": "NAME",
                                        "is_unique": false,
                                        "is_index": false,
                                        "is_encrypted": true,
                                        "is_nullable": false,
                                        "is_builtin": false,
                                        "is_readonly": false,
                                        "creation_time": "2023-01-25T16:21:48.308234Z",
                                        "modification_time": "2023-01-25T16:21:48.308234Z"
                                    },
                                    {
                                        "description": "Last name",
                                        "name": "last_name",
                                        "data_type_name": "NAME",
                                        "is_unique": false,
                                        "is_index": false,
                                        "is_encrypted": true,
                                        "is_nullable": false,
                                        "is_builtin": false,
                                        "is_readonly": false,
                                        "creation_time": "2023-01-25T16:21:48.308234Z",
                                        "modification_time": "2023-01-25T16:21:48.308234Z"
                                    },
                                    {
                                        "description": "Phone number",
                                        "name": "phone_number",
                                        "data_type_name": "PHONE_NUMBER",
                                        "is_unique": true,
                                        "is_index": true,
                                        "is_encrypted": true,
                                        "is_nullable": true,
                                        "is_builtin": false,
                                        "is_readonly": false,
                                        "creation_time": "2023-01-25T16:21:48.308234Z",
                                        "modification_time": "2023-01-25T16:21:48.308234Z"
                                    },
                                    {
                                        "description": "Social Security Number",
                                        "name": "ssn",
                                        "data_type_name": "SSN",
                                        "is_unique": true,
                                        "is_index": true,
                                        "is_encrypted": true,
                                        "is_nullable": true,
                                        "is_builtin": false,
                                        "is_readonly": false,
                                        "creation_time": "2023-01-25T17:31:40.291033Z",
                                        "modification_time": "2023-01-25T17:31:40.291033Z"
                                    }
                                ]
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The collection is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Collection properties"
                ]
            }
        },
        "/api/pvlt/1.0/ctl/bundles/{bundle}": {
            "get": {
                "operationId": "get-bundle",
                "summary": "Get bundle",
                "description": "Gets a bundle.\n\nThe role that performs this operation must have the `CapCodeReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/bundle_name"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bundle"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Bundles"
                ]
            },
            "patch": {
                "operationId": "update-bundle",
                "summary": "Update bundle",
                "description": "Updates a bundle.\n\nAn update is allowed only if the prototypes of the JavaScript functions in the request are a superset of those in the\nbundle.\nThe name of the bundle can't be updated.\n\nThe role performing this operation must have the `CapCodeWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/bundle_name"
                    }
                ],
                "requestBody": {
                    "x-has-pii": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PartialBundle"
                            },
                            "example": {
                                "name": "example_bundle",
                                "description": "An example bundle that exports a validator, normalizer, and transformer",
                                "code": "U2FtcGxlIGNvZGU="
                            }
                        }
                    },
                    "description": "Details of the bundle including the code that defines the functions as properties of the exports object. Name can't be updated.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bundle"
                                },
                                "example": {
                                    "name": "example_bundle",
                                    "description": "An example bundle that exports a validator, normalizer, and transformer",
                                    "exports": {
                                        "validators": [
                                            {
                                                "name": "is_positive",
                                                "type": "validator",
                                                "description": "A validator that returns true if its argument is positive.",
                                                "dependencies": {
                                                    "properties": [],
                                                    "http_get_access": [],
                                                    "http_post_access": []
                                                }
                                            }
                                        ],
                                        "normalizers": [
                                            {
                                                "name": "to_lower",
                                                "type": "normalizer",
                                                "description": "A normalizer that formats a string to lowercase without any dependencies."
                                            }
                                        ],
                                        "transformers": [
                                            {
                                                "name": "to_name_with_title",
                                                "type": "transformer",
                                                "description": "A transformer that accepts a full name and returns it prepended with a title.",
                                                "dependencies": {
                                                    "properties": [
                                                        "gender",
                                                        "marital_status"
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "code": "U2FtcGxlIGNvZGU=",
                                    "creation_time": "2022-12-02T02:02:14.398599Z"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "description": "The bundle is not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                },
                                "example": {
                                    "error_code": "PV1004",
                                    "message": "The bundle is not found.",
                                    "context": {}
                                }
                            }
                        }
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Bundles"
                ]
            },
            "delete": {
                "operationId": "delete-bundle",
                "summary": "Delete bundle",
                "description": "Deletes a bundle.\n\nThe role that performs this operation must have the `CapCodeWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/bundle_name"
                    },
                    {
                        "description": "Options for the operation. Options include:\n- `force` â€“ delete the bundle if there is an unused data type referencing it. An unused data type is one that is not used in any object schema. When the bundle is deleted, the data type referencing it is also deleted.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "force"
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The bundle is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Bundles"
                ]
            }
        },
        "/api/pvlt/1.0/ctl/types/{type}": {
            "get": {
                "operationId": "get-data-type",
                "summary": "Get a data type",
                "description": "Gets a data type.\n\nThe role performing this operation must have the `CapTypesReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/type_name"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataType"
                                },
                                "example": {
                                    "name": "student_id",
                                    "base_type_name": "STRING",
                                    "description": "A custom data type representing a student ID based on the built-in STRING type.",
                                    "validator": "example_bundle.validate_student_id",
                                    "normalizer": "example_bundle.normalize_student_id",
                                    "transformers": [
                                        "example_bundle.format_student_id",
                                        "example_bundle.mask_first_4_digits"
                                    ],
                                    "default_transformer": "example_bundle.format_student_id",
                                    "creation_time": "2022-12-01T10:04:42.777225Z"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The data type is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Custom data types"
                ]
            },
            "patch": {
                "operationId": "update-data-type",
                "summary": "Update data type",
                "description": "Updates a data type.\n\nThis implementation only supports updating the transformers of custom and built-in data types.\n\n:::note\n- Built-in transformers can not be added or removed.\n- Custom transformers may be added or removed but must be exported by a loaded bundle.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/type_name"
                    }
                ],
                "requestBody": {
                    "x-has-pii": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateDataTypeRequest"
                            },
                            "example": {
                                "custom_transformers": [
                                    "example_bundle.format_student_id",
                                    "example_bundle.mask_first_4_digits"
                                ]
                            }
                        }
                    },
                    "description": "Details of the data type, including the names and locations of the JavaScript functions it uses.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataType"
                                },
                                "example": {
                                    "name": "student_id",
                                    "base_type_name": "STRING",
                                    "description": "A custom data type representing a student ID based on the built-in STRING type.",
                                    "validator": "example_bundle.validate_student_id",
                                    "normalizer": "example_bundle.normalize_student_id",
                                    "transformers": [
                                        "token",
                                        "example_bundle.format_student_id",
                                        "example_bundle.mask_first_4_digits"
                                    ],
                                    "default_transformer": "example_bundle.format_student_id",
                                    "creation_time": "2022-12-01T10:04:42.777225Z"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Custom data types"
                ]
            },
            "delete": {
                "operationId": "delete-data-type",
                "summary": "Delete data type",
                "description": "Deletes a data type.\n\nThe role that performs this operation must have the `CapTypesWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/type_name"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The data type is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Custom data types"
                ]
            }
        },
        "/api/pvlt/1.0/data/collections/{collection}/decrypt/objects": {
            "post": {
                "operationId": "decrypt",
                "summary": "Decrypt",
                "description": "Decrypts ciphertext. Supports bulk operations.\n\nTo decrypt ciphertext, the request must include the scope used when the ciphertext was encrypted. By default, only ciphertext considered active is decrypted. Ciphertext is considered active when its metadata `expiration` property is for the current or a future date. If `options` is set to `archived`, the ciphertext is only decrypted if its metadata `expiration` property is for a date in the past.\n\nBy default, all property values from the ciphertext are returned. Use `props` to return a subset of the encrypted property values.\n\nIf any request details are invalid, none of the ciphertexts are decrypted.\n\nThe role performing this operation must have both of these:\n\n- The `CapCryptoDecrypter` capability.\n- At least one allowing policy and no denying policies for the `decrypt` operation for each of the collection properties specified in the call.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how Vault uses capabilities to control access to operations and policies to control access to data.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "description": "Options for the operation. Options include:\n- `archived` â€“ whether to decrypt only archived objects. If not specified, decrypts only active objects.\n- `include_metadata` - show the encrypted object metadata.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "description": "Option for the operation.",
                                "type": "string",
                                "enum": [
                                    "archived",
                                    "include_metadata"
                                ]
                            }
                        }
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    }
                ],
                "requestBody": {
                    "x-has-pii": true,
                    "description": "Details of the decryption request.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/DecryptionRequest"
                                }
                            },
                            "example": [
                                {
                                    "encrypted_object": "...",
                                    "props": [
                                        "phone_number",
                                        "email"
                                    ]
                                }
                            ]
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DecryptedObject"
                                    }
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                },
                                "example": {
                                    "objectid": "credit_cadr",
                                    "error_code": "PV3003",
                                    "message": "One or more values are invalid."
                                }
                            }
                        },
                        "description": "The collection or properties aren't found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Crypto"
                ]
            }
        },
        "/api/pvlt/1.0/ctl/collections/{collection}/properties/{property}": {
            "post": {
                "operationId": "add-collection-property",
                "summary": "Add collection property",
                "description": "Adds a property to a collection.\n\nThe property name provided in the `property` parameter and request body must match. When the collection contains objects, only nullable properties can be added to the collection.\n\n:::note\nThe combined length of the collection name and the longest property name can not exceed 40 characters.\n:::\n\nThe role performing this operation must have the `CapCollectionsWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "name": "property",
                        "in": "path",
                        "description": "The name of the property.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PropertyName"
                        }
                    }
                ],
                "requestBody": {
                    "x-has-pii": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Property"
                            },
                            "example": {
                                "description": "Social Security Number",
                                "name": "ssn",
                                "data_type_name": "ssn",
                                "is_unique": true,
                                "is_index": true,
                                "is_encrypted": true,
                                "is_nullable": true
                            }
                        }
                    },
                    "description": "Details of the property.",
                    "required": true,
                    "x-originalParamName": "property"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Property"
                                },
                                "example": {
                                    "description": "Social Security Number",
                                    "name": "ssn",
                                    "data_type_name": "ssn",
                                    "is_unique": true,
                                    "is_index": true,
                                    "is_encrypted": true,
                                    "is_nullable": true,
                                    "is_builtin": false,
                                    "is_readonly": false,
                                    "creation_time": "2022-12-02T02:02:14.398599Z",
                                    "modification_time": "2022-12-02T02:02:14.398599Z"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The collection is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Collection properties"
                ]
            },
            "get": {
                "operationId": "get-collection-property",
                "summary": "Get collection property",
                "description": "Gets a property of a collection.\n\nThe role that performs this operation must have the `CapCollectionsReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "description": "The name of the property.",
                        "in": "path",
                        "name": "property",
                        "required": true,
                        "example": "first_name",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Property"
                                },
                                "example": {
                                    "description": "Social Security Number",
                                    "name": "ssn",
                                    "data_type_name": "SSN",
                                    "is_unique": true,
                                    "is_index": true,
                                    "is_encrypted": true,
                                    "is_nullable": true,
                                    "is_builtin": false,
                                    "is_readonly": false,
                                    "creation_time": "2023-01-25T17:31:40.291033Z",
                                    "modification_time": "2023-01-25T17:31:40.291033Z"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The collection or property is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Collection properties"
                ]
            },
            "patch": {
                "operationId": "update-collection-property",
                "summary": "Update collection property",
                "description": "Updates the attributes of a collection property. Supports updating the following property attributes:\n* `description`\n* `is_index`\n* `is_nullable` (only from false to true)\n\n:::info\nThis command may take a while to complete (e.g. when adding an index) and is excluded from Vault's standard call timeout.\n:::\n\nThe role that performs this operation must have the `CapCollectionsWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "description": "The name of the property.",
                        "in": "path",
                        "name": "property",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "ssn"
                    }
                ],
                "requestBody": {
                    "x-has-pii": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePropertyRequest"
                            },
                            "example": {
                                "name": "email",
                                "description": "Email address",
                                "is_index": true,
                                "is_nullable": true
                            }
                        }
                    },
                    "description": "The property details to update.",
                    "required": true,
                    "x-originalParamName": "property"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Property"
                                },
                                "example": {
                                    "description": "Social Security Number",
                                    "name": "ssn",
                                    "data_type_name": "ssn",
                                    "is_unique": true,
                                    "is_index": true,
                                    "is_encrypted": true,
                                    "is_nullable": true,
                                    "is_builtin": false,
                                    "is_readonly": false,
                                    "creation_time": "2022-12-02T02:02:14.398599Z",
                                    "modification_time": "2022-12-02T02:02:14.398599Z"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The collection or property wasn't found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "501": {
                        "$ref": "#/components/responses/501"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Collection properties"
                ]
            },
            "delete": {
                "operationId": "delete-collection-property",
                "summary": "Delete collection property",
                "description": "Deletes a property from a collection.\n\nAny values stored against the property in objects are also deleted. This operation is irreversible.\n\nThe role that performs this operation must have the `CapCollectionsWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "description": "The name of the property.",
                        "in": "path",
                        "name": "property",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "ssn"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The collection or property wasn't found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Collection properties"
                ]
            }
        },
        "/api/pvlt/1.0/data/collections/{collection}/objects/{id}": {
            "get": {
                "operationId": "get-object-by-id",
                "summary": "Get object",
                "description": "Returns an object from a collection with all or a subset of object property values.\n\nThe role performing this operation must have both of the following:\n- The `CapDataReader` capability.\n- At least one allowing policy and no denying policies for the `read` operation for each of the properties and the\n  collection requested in the call.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how\ncapabilities are used to control access to operations and policies are used to control access to data.\n\n**Warning**: Use of the `unsafe` option, to include all object property values, may expose more private information than is required, use with caution.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "description": "The ID of the object.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "463a83d0-a816-4902-abba-2486e0c0a0bb"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    },
                    {
                        "$ref": "#/components/parameters/trans_param"
                    },
                    {
                        "description": "Options for the operation. Options include:\n- `archived` â€“ whether to list only archived objects. If not specified, list only active objects.\n- `show_builtins` â€“ show built-in properties, can only be specified with `unsafe`.\n- `unsafe` â€“ fetch all the properties, cannot be specified with `props`.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "unsafe",
                                    "show_builtins",
                                    "archived"
                                ]
                            }
                        }
                    },
                    {
                        "$ref": "#/components/parameters/props"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectFields"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The collection, properties, or object is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Objects"
                ]
            },
            "patch": {
                "operationId": "update-object-by-id",
                "summary": "Update object",
                "description": "Updates properties of an object in a collection.\n\nThe role performing this operation must have both of the following:\n- The `CapDataWriter` capability.\n- At least one allowing policy and no denying policies for the `write` operation for each of the collection properties\n  specified in the call.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how\ncapabilities are used to control access to operations and policies are used to control access to data.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "description": "The ID of the object.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    },
                    {
                        "description": "Object expiration time in seconds. If not set, the expiration will not be changed. See the `PVAULT_EXPIRATION_ASSOCIATED_OBJECTS` and `PVAULT_EXPIRATION_UNASSOCIATED_OBJECTS` environment variables. If set to an empty value, the object will be marked to not expire.",
                        "in": "query",
                        "name": "expiration_secs",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[0-9]*$"
                        }
                    },
                    {
                        "description": "Options for the operation. Options include:\n- `archived` â€“ whether to update only archived objects. If not specified, update only active objects.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "archived"
                                ]
                            }
                        }
                    },
                    {
                        "$ref": "#/components/parameters/import"
                    },
                    {
                        "$ref": "#/components/parameters/export_key"
                    }
                ],
                "requestBody": {
                    "x-has-pii": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ObjectFields"
                            }
                        }
                    },
                    "description": "The object properties to update.",
                    "required": true,
                    "x-originalParamName": "object"
                },
                "responses": {
                    "200": {
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The collection, properties, or object is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Objects"
                ]
            },
            "delete": {
                "operationId": "delete-object-by-id",
                "summary": "Delete object",
                "description": "Deletes an object from a collection. This operation is irreversible.\n\nThe role performing this operation must have both of the following:\n- The `CapDataWriter` capability.\n- At least one allowing policy and no denying policies for the `delete` operation for each of the properties defined for\n  the collection specified in the call.\n  \nSee [identity and access management](/data-security/identity-and-access-management) for more information about how\ncapabilities are used to control access to operations and policies are used to control access to data.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "description": "The ID of the object.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "description": "Options for the operation. Options include:\n- `archived` â€“ whether to delete only archived objects. If not specified, delete only active objects.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "archived"
                                ]
                            }
                        }
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The collection or object is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Objects"
                ]
            }
        },
        "/api/pvlt/1.0/data/collections/{collection}/encrypt/blob": {
            "post": {
                "operationId": "encrypt-blob",
                "summary": "Encrypt blob",
                "description": "Creates ciphertext for the value of a BLOB type property.\n\nReceives a query parameter, `prop`, containing the name of a BLOB type property, and raw bytes (not a JSON object) in the request body. The ciphertext is returned in the response body as raw bytes (application/octet-stream`).\n\nSee [Encrypt](/api/operations/encrypt) for more information about the encryption process and request parameters.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "description": "Encrypted object expiration time in seconds. If not set, the default expiration time is used. See the `PVAULT_EXPIRATION_TOKENS` variable. If set to an empty value, the encrypted ciphertext blob does not expire.",
                        "in": "query",
                        "name": "expiration_secs",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[0-9]*$"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    },
                    {
                        "name": "prop",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PropertyName"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/EncryptionType"
                        }
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "description": "A classification for the encrypted object that is added to the ciphertext as associated data (AAD).\nAn object encrypted with a scope can be decrypted only with the same scope.\n",
                        "schema": {
                            "type": "string",
                            "default": "default"
                        },
                        "example": "default"
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "Comma-separated list of tags to attach to the metadata of the encrypted object.\nThe maximum number of allowed tags is defined by the [`PVAULT_DB_MAX_TOKEN_TAGS` environment variable](/guides/configure/environment-variables#database) (default 10).\nTags are not supported for the `deterministic` encryption type.\n",
                        "schema": {
                            "type": "string",
                            "maxLength": 256
                        },
                        "example": "tag1,tag2"
                    }
                ],
                "requestBody": {
                    "x-has-pii": true,
                    "description": "Details of the encryption request.",
                    "required": true,
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "type": "string",
                                "format": "binary"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                },
                                "example": {
                                    "objectid": "credit_cadr",
                                    "error_code": "PV3003",
                                    "message": "One or more values are invalid."
                                }
                            }
                        },
                        "description": "The collection or properties aren't found, or property values are invalid."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Crypto"
                ]
            }
        },
        "/api/pvlt/1.0/data/collections/{collection}/decrypt/blob": {
            "post": {
                "operationId": "decrypt-blob",
                "summary": "Decrypt blob",
                "description": "Decrypts ciphertext and returns the plaintext as raw bytes (`application/octet-stream`) not a JSON object.\n\nSee [Decrypt](/api/operations/decrypt) for more information about the decryption process and request parameters.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "description": "Options for the operation. Options include:\n- `archived` â€“ whether to decrypt only archived objects. If not specified, decrypts only active objects.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "description": "Option for the operation.",
                                "type": "string",
                                "enum": [
                                    "archived"
                                ]
                            }
                        }
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    },
                    {
                        "name": "prop",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/PropertyName"
                        }
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "description": "A classification for the encrypted object that is added to the ciphertext as associated data (AAD).\nAn object encrypted with a scope can be decrypted only with the same scope.\n",
                        "schema": {
                            "type": "string",
                            "default": "default"
                        },
                        "example": "default"
                    }
                ],
                "requestBody": {
                    "x-has-pii": true,
                    "description": "Details of the decryption request.",
                    "required": true,
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "type": "string",
                                "format": "binary"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                },
                                "example": {
                                    "objectid": "credit_cadr",
                                    "error_code": "PV3003",
                                    "message": "One or more values are invalid."
                                }
                            }
                        },
                        "description": "The collection or properties aren't found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Crypto"
                ]
            }
        },
        "/api/pvlt/1.0/data/collections/{collection}/hash/objects": {
            "post": {
                "operationId": "hash-objects",
                "summary": "Hash",
                "description": "Creates a deterministic hash based on an object's property values, collection, and scope. Supports bulk operations.\n\nThis operation is similar to using the [tokenize](/api/operations/tokenize) operation for a token of type `deterministic`. The hash value is identical to the token ID generated for the same combination of collection, object, property values, and scope. However, unlike the token, this hash is not stored in Vault's storage and, as such, cannot be detokenized, searched, or invalidated.\n\nThe role performing this operation must have both of these:\n\n- The `CapCryptoHasher` capability.\n- At least one allowing policy and no denying policies for the `hash` operation for each of the collection properties specified in the call.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how Vault uses capabilities to control access to operations and policies to control access to data.\n``",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    }
                ],
                "requestBody": {
                    "x-has-pii": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/HashObjectRequest"
                                }
                            }
                        }
                    },
                    "description": "Details of the hashing request.",
                    "required": true,
                    "x-originalParamName": "object_prop"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TokenValue"
                                    }
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                },
                                "example": {
                                    "objectid": "credit_cadr",
                                    "error_code": "PV3003",
                                    "message": "One or more values are invalid."
                                }
                            }
                        },
                        "description": "The collection, objects, or properties aren't found or are missing."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Crypto"
                ]
            }
        },
        "/api/pvlt/1.0/data/collections/{collection}/rotate/tokens": {
            "post": {
                "operationId": "rotate-tokens",
                "summary": "Rotate tokens",
                "description": "Generates new token IDs for a list of tokens.\n\nThe role performing this operation must have both of these:\n- The `CapTokensWriter` capability.\n- At least one allowing policy and no denying policies for the `write` operation for the `tokens` resource of the specified collection.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.\n",
                "parameters": [
                    {
                        "description": "Comma-separated list of token IDs.",
                        "in": "query",
                        "name": "token_ids",
                        "required": true,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RotatedTokens"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                },
                                "example": {
                                    "token_ids": "d27923c6-5d16-41e3-89ee-118b05a25372",
                                    "error_code": "PV3087",
                                    "message": "One or more token IDs not found."
                                }
                            }
                        },
                        "description": "The collection, reason, or tokens aren't found or are missing or the `reason` is set to `other` but no `adhoc_reason` is provided."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Tokens"
                ]
            }
        },
        "/api/pvlt/1.0/data/collections/{collection}/query/tokens": {
            "post": {
                "operationId": "search-tokens",
                "summary": "Search tokens",
                "description": "Lists tokens with their metadata. \n\nThe tokens returned by this operation are defined using three query parameters: `token_ids`, `object_ids`, and `tags`. The operation returns an empty response if it finds no matches. See the [Retrieve a token](/guides/tokenize-personal-data/retrieve-a-token) guide for more information about how to match tokens for this operation. \n\nThe role performing this operation must have all of these:\n- The `CapTokensReader` capability.\n- At least one allowing policy and no denying policies for the `read` operation for the `tokens` resource of the specified collection.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.\n",
                "parameters": [
                    {
                        "description": "Options for the operation. Options include:\n- `archived` â€“ whether to search only archived tokens. If not specified, search only active tokens.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "archived"
                                ]
                            }
                        }
                    },
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    }
                ],
                "requestBody": {
                    "x-has-pii": false,
                    "description": "The token query.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryToken"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/TokenMetadata"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Tokens"
                ]
            }
        },
        "/api/pvlt/1.0/data/info/health": {
            "get": {
                "operationId": "data-health",
                "summary": "Get data service health/status",
                "description": "Gets the status of the service.\n\nThe status codes returned follow the IETF standard [Health Check Response Format for HTTP APIs](https://datatracker.ietf.org/doc/html/draft-inadarei-api-health-check-05). For example, `pass` is returned when the service is up.\n\nThe role performing this operation must have the `CapDataReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Health"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "tags": [
                    "System"
                ]
            }
        },
        "/api/pvlt/1.0/ctl/info/health": {
            "get": {
                "operationId": "control-health",
                "summary": "Get control service health/status",
                "description": "Gets the status of the service.\n\nThe status codes returned follow the IETF standard [Health Check Response Format for HTTP APIs](https://datatracker.ietf.org/doc/html/draft-inadarei-api-health-check-05). For example, `pass` is returned when the service is up.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Health"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "tags": [
                    "System"
                ]
            }
        },
        "/api/pvlt/1.0/ctl/info/cluster": {
            "get": {
                "operationId": "get-cluster-info",
                "summary": "Get cluster information",
                "description": "Get Cluster Information.\n\nReturns the vault's generation and the generations of all the workers (data servers).\n\nThe role that performs this operation must have the `CapClusterInfoReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AllGenerations"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "System"
                ]
            }
        },
        "/api/pvlt/1.0/data/collections/{collection}/transaction_id/{id}": {
            "get": {
                "operationId": "get-by-transaction-id",
                "summary": "Get by transaction ID",
                "description": "Returns the list of token IDs associated with a transaction ID, an optional identifier passed to the [tokenize](/api/operations/tokenize) operation.\n\nThe role performing this operation must have the `CapTransactionIdReader` capability, or another capability that matches the URL, such as the `CapDataReader` capability.",
                "parameters": [
                    {
                        "description": "The transaction ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionID"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Tokens"
                ]
            }
        },
        "/api/pvlt/1.0/system/admin/lifecycle/gc": {
            "post": {
                "operationId": "garbage-collection",
                "summary": "Delete objects and tokens",
                "description": "Deletes objects and tokens that have been archived for longer than the retention period and token transaction IDs with no associated tokens.\n\n:::note\nThis operation deletes a maximum of 10,000 items. To delete all items, repeat calls until the count of deleted items reaches zero. Using the [prune job](/guides/prune-archived-data#configuring-the-prune-job), rather than calling the API, is recommended.\n\nFor ad-hoc deletion of archived records, use the [Delete objects and tokens](/cli/reference#delete-objects-and-tokens) CLI command, which deletes all relevant items.\n:::\n\nSee [Object life cycle](/data-privacy/object-lifecycle) for more information on how objects and tokens are archived and how deletion is affected by the retention period.\n",
                "parameters": [
                    {
                        "description": "Whether to delete objects, tokens, or token transaction IDs with no associated tokens. Options are:\n- `objects_only` â€“ delete only objects.\n- `tokens_only` â€“ delete only tokens.\n- `transaction_ids_only` â€“ delete only token transaction IDs with no associated tokens.\n",
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "objects_only",
                                "tokens_only",
                                "transaction_ids_only"
                            ]
                        }
                    },
                    {
                        "description": "Whether to respond with how many objects and tokens are available for deletion, without deleting them.",
                        "in": "query",
                        "name": "dry_run",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DeletionCount"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "System"
                ]
            }
        },
        "/api/pvlt/1.0/system/debug/error/trigger": {
            "post": {
                "operationId": "trigger-error",
                "summary": "Trigger an artificial error",
                "description": "Manually trigger an artificial error for testing purposes.\n\nThe role that performs this operation must have the `CapErrorWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    },
                    "x-has-pii": true
                },
                "responses": {
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/500"
                    },
                    "403": {
                        "$ref": "#/components/responses/500"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "System"
                ]
            }
        },
        "/api/pvlt/1.0/system/info/configuration": {
            "get": {
                "operationId": "get-configuration",
                "summary": "Get system configuration",
                "description": "Get the current active system configuration.\n\nThe role that performs this operation must have the `CapInfoReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "responses": {
                    "200": {
                        "content": {
                            "application/toml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Config"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "System"
                ]
            }
        },
        "/api/pvlt/1.0/system/info/license": {
            "get": {
                "operationId": "get-license",
                "summary": "Get license",
                "description": "Gets information on the currently used license.\n\nThe role that performs this operation must have the `CapInfoReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/License"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "System"
                ]
            },
            "post": {
                "operationId": "set-license",
                "summary": "Set license",
                "description": "Sets the license key for the Vault. \n\n:::note\nIn the hosted version of Vault, Piiano manages and sets the license key. \n:::",
                "requestBody": {
                    "x-has-pii": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LicenseKey"
                            }
                        }
                    },
                    "description": "The license key.",
                    "required": true,
                    "x-originalParamName": "key"
                },
                "responses": {
                    "200": {
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "System"
                ]
            }
        },
        "/api/pvlt/1.0/system/info/version": {
            "get": {
                "operationId": "get-vault-version",
                "summary": "Get Vault version",
                "description": "Gets the version of Vault.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductVersion"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "System"
                ]
            }
        },
        "/api/pvlt/1.0/data/collections/{collection}/bulk/objects": {
            "post": {
                "operationId": "add-objects",
                "summary": "Add objects (bulk)",
                "description": "Adds objects to a collection. The request must include all the non-nullable properties for each object, as defined by the collection schema. Use the [list collection properties](/api/operations/list-collection-properties) operation to check the collection schema.\n\nWhen adding objects from an external system that uses UUID IDs, you can include the object IDs in the request to set the IDs in Vault. For example, `\"id\",\"463a83d0-a816-4902-abba-2486e0c0a0bb\"`. Vault normalizes the IDs to lowercase.\n\nIf the objects to add are exported from an external system or Vault:\n- set `import` to `true` to import values for the built-in properties `_creation_time`, `_modification_time`, and `_expiration_time`. \n- if the data is encrypted, to decrypt the data provide the encryption key in `export_key`.\n\nIf any object add fails, the operation fails and no objects are added.\n\nThe maximum number of objects that can be added in one operation is determined by the [`PVAULT_SERVICE_MAX_PAGE_SIZE` environment variable](/guides/configure/environment-variables#service-and-features).\n\nSee the [add object](/api/operations/add-object) operation to add an object to a collection.\n\nThe role performing this operation must have both of the following:\n- The `CapDataWriter` capability.\n- For each object in the request, at least one allowing policy and no denying policies for the `write` operation for each object property.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    },
                    {
                        "description": "Object expiration time in seconds, cannot be set to 0. If not set, the default value is used. See the `PVAULT_EXPIRATION_ASSOCIATED_OBJECTS` and `PVAULT_EXPIRATION_UNASSOCIATED_OBJECTS` environment variables. If set to an empty value, the objects will be marked to not expire.",
                        "in": "query",
                        "name": "expiration_secs",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[0-9]*$"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/import"
                    },
                    {
                        "$ref": "#/components/parameters/export_key"
                    }
                ],
                "requestBody": {
                    "x-has-pii": true,
                    "description": "List of objects to add.\nThe order of the objects in this array is preserved in the response.\n",
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "List of objects to add.\n",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ObjectFields"
                                },
                                "example": [
                                    {
                                        "date_of_birth": "1993-02-22",
                                        "email": "patfar@example.com",
                                        "first_name": "Pat",
                                        "last_name": "Far",
                                        "phone_number": "+11011010101"
                                    },
                                    {
                                        "date_of_birth": "1994-12-03",
                                        "email": "ronfar@example.com",
                                        "first_name": "Ron",
                                        "last_name": "Far",
                                        "phone_number": "+19099090909"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true,
                    "x-originalParamName": "object"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Bulk200Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The collection or properties is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Objects"
                ]
            },
            "patch": {
                "operationId": "update-objects",
                "summary": "Update objects (bulk)",
                "description": "Updates properties of objects in a collection.\n\nIf any object update fails, the operation fails and no objects are updated.\n\nThe maximum number of objects that can be updated in one operation is determined by the [`PVAULT_SERVICE_MAX_PAGE_SIZE` environment variable](/guides/configure/environment-variables#service-and-features).\n\nThe role performing this operation must have both of the following:\n- The `CapDataWriter` capability.\n- For each object in the request, at least one allowing policy and no denying policies for the `write` operation for each of the object's properties.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how \ncapabilities are used to control access to operations and policies are used to control access to data.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "description": "Expiration time in seconds for the tokens. If not set, the expiry dates of the tokens are not changed.",
                        "in": "query",
                        "name": "expiration_secs",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[0-9]*$"
                        }
                    },
                    {
                        "description": "Options for the operation. Options include:\n- `archived` â€“ whether to update only archived objects. If not specified, updates only active objects.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "archived"
                                ]
                            }
                        }
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    },
                    {
                        "$ref": "#/components/parameters/import"
                    },
                    {
                        "$ref": "#/components/parameters/export_key"
                    }
                ],
                "requestBody": {
                    "x-has-pii": true,
                    "description": "List of objects properties to update.\nThe order of the objects in the array is preserved in the response.\n",
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "List of objects properties to update.\n",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ObjectFields"
                                }
                            },
                            "example": [
                                {
                                    "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                                    "phone_number": "+11011010102"
                                },
                                {
                                    "id": "69861845-8405-430c-b8ef-7e646d153149",
                                    "phone_number": "+19099090908"
                                }
                            ]
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Bulk200Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The collection is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Objects"
                ]
            },
            "delete": {
                "operationId": "delete-objects",
                "summary": "Delete objects (bulk)",
                "description": "Deletes objects from a collection. This operation is irreversible.\n\nIf any object delete fails, the operation fails and no objects are deleted.\n\nThe maximum number of objects that can be deleted in one operation is determined by the [`PVAULT_SERVICE_MAX_PAGE_SIZE` environment variable](/guides/configure/environment-variables#service-and-features).\n\n\nThe role performing this operation must have both of the following:\n- The `CapDataWriter` capability.\n- At least one allowing policy and no denying policies for the `delete` operation for each of the properties defined for\n  the collection specified in the call.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how\ncapabilities are used to control access to operations and policies are used to control access to data.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "description": "Options for the operation. Options include:\n- `archived` â€“ whether to delete only archived objects. If not specified, deletes only active objects.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "archived"
                                ]
                            }
                        }
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    }
                ],
                "requestBody": {
                    "x-has-pii": false,
                    "description": "List of objects to delete.\nThe order of the objects in the array is preserved in the response.\n",
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "List of objects to delete.\n",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ObjectID"
                                },
                                "example": [
                                    {
                                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08"
                                    },
                                    {
                                        "id": "69861845-8405-430c-b8ef-7e646d153149"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Bulk200Response"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The collection or object is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Objects"
                ]
            }
        },
        "/api/pvlt/1.0/data/collections/{collection}/query/objects": {
            "post": {
                "operationId": "search-objects",
                "summary": "Search objects",
                "description": "Returns a [paginated list](/api/api-pagination) of objects, with property values, from a collection that satisfies a query.\n\nThe role performing this operation must have all the following:\n- The `CapDataSearcher` capability.\n- Policies:\n  + At least one allowing policy and no denying policies for the `read` operation for each of the collection properties\n    specified in the `props` query parameter.\n  + At least one allowing policy and no denying policies for the `search` operation for each of the collection\n    properties\n    specified in the `query` body parameter.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how\ncapabilities are used to control access to operations and policies are used to control access to data.\n\n**Warning**: Use of the `unsafe` option, to include all object property values, may expose more private information than is required, use with caution..",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/collection_name"
                    },
                    {
                        "$ref": "#/components/parameters/adhoc_reason"
                    },
                    {
                        "$ref": "#/components/parameters/reason"
                    },
                    {
                        "$ref": "#/components/parameters/reload_cache"
                    },
                    {
                        "$ref": "#/components/parameters/page_size"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/trans_param"
                    },
                    {
                        "description": "Options for the operation. Options include:\n- `archived` â€“ whether to search only archived objects. If not specified, search only active objects.\n- `show_builtins` â€“ show built-in properties, can only be specified with `unsafe`.\n- `unsafe` â€“ fetch all the properties, cannot be specified with `props`.\n",
                        "in": "query",
                        "name": "options",
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "enum": [
                                    "unsafe",
                                    "show_builtins",
                                    "archived"
                                ]
                            }
                        }
                    },
                    {
                        "$ref": "#/components/parameters/props"
                    }
                ],
                "requestBody": {
                    "x-has-pii": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Query"
                            },
                            "example": {
                                "in": {
                                    "first_name": [
                                        "Pat"
                                    ]
                                },
                                "match": {
                                    "date_of_birth": "1993-02-22"
                                }
                            }
                        }
                    },
                    "description": "The query.\nThis is a JSON object consisting of two maps in which the keys are property names. \nThe `in` map maps a property name to an array of possible values for that property.\nThe `match` map maps a property name to the required value for that property.\nAn object matches the query if the object meets the requirements of both maps.\nFor example:\n```json\n{\n  \"in\": {\n    \"email\": [\"john@work.com\", \"john@home.com\"],\n  },\n  \"match\": {\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\"\n  }\n}\n```\nis equivalent to:\n```sql\nWHERE first_name = 'John' AND last_name='Doe' AND email IN ('john@work.com', 'john@home.com')\n```\n",
                    "required": true,
                    "x-originalParamName": "query"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectFieldsPage"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The collection or properties is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Objects"
                ]
            }
        },
        "/api/pvlt/1.0/ctl/iam/conf": {
            "get": {
                "operationId": "get-iam-conf",
                "summary": "Get IAM configuration",
                "description": "Gets the identity and access management (IAM) configuration in TOML format.\n\nThe role that performs this operation must have the `CapIAMReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "responses": {
                    "200": {
                        "content": {
                            "application/toml": {
                                "schema": {
                                    "$ref": "#/components/schemas/IAMConfig"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "IAM"
                ]
            },
            "post": {
                "operationId": "set-iam-conf",
                "summary": "Set IAM configuration",
                "description": "Sets the identity and access management (IAM) configuration.\n\nThe role that performs this operation must have the `CapIAMWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "requestBody": {
                    "x-has-pii": false,
                    "content": {
                        "application/toml": {
                            "schema": {
                                "$ref": "#/components/schemas/IAMConfig"
                            }
                        }
                    },
                    "description": "IAM configuration in TOML format.",
                    "required": true,
                    "x-originalParamName": "auth_config"
                },
                "responses": {
                    "200": {
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "IAM"
                ]
            }
        },
        "/api/pvlt/1.0/ctl/iam/user/regen": {
            "post": {
                "operationId": "regenerate-user-api-key",
                "summary": "Regenerate user API key",
                "description": "Regenerates a user's API key. The existing API key is invalidated. This operation is irreversible.\n\n:::note\nYou cannot regenerate the key for the Admin user. See [Set the admin's API key](/guides/manage-users-and-policies/set-admin-api-key) for information on how to set a value for this key.\n:::\n\nThe role that performs this operation must have the `CapIAMWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "requestBody": {
                    "x-has-pii": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserName"
                            }
                        }
                    },
                    "description": "The name of the user to regenerate API key for.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIKey"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "description": "The caller doesn't have the required access rights or attempts to generate a key for the admin user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                },
                                "example": {
                                    "error_code": "PV2021",
                                    "message": "Regenerating a key for Admin is not allowed."
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/rest.HTTPError"
                                }
                            }
                        },
                        "description": "The user is not found."
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "IAM"
                ]
            }
        },
        "/api/pvlt/1.0/system/admin/keys/rotate": {
            "post": {
                "operationId": "rotate-keys",
                "summary": "Rotate data encryption keys",
                "description": "Rotates all the KMS keys that Vault uses to encrypt properties, tokens, and more.\n\n:::note\nKey rotation not managed in the hosted version of Vault.\n:::\n\nWhen the keys are rotated, new data is encrypted with the new key. All old keys are retained, so that content encrypted with previous keys can be decipherable.\n\nThe role that performs this operation must have the `CapKMSWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.",
                "responses": {
                    "200": {
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "System"
                ]
            }
        },
        "/api/pvlt/1.0/system/admin/export_key": {
            "get": {
                "operationId": "get-export-key",
                "summary": "Get export key",
                "description": "Gets an encrypted copy of the key used to encrypt exported data.\nThe key is encrypted using the export KMS key defined by the [`PVAULT_KMS_EXPORT_URI` or `PVAULT_KMS_EXPORT_SEED` environment variables](/guides/configure/environment-variables#key-management-service).\nWhen importing data, the key is provided to the Vault and decrypted by the KMS, then used to decrypt the data.\n\nThe role that performs this operation must have the `CapExportKeyReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "responses": {
                    "200": {
                        "description": "The request is successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExportKeyResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "System"
                ]
            }
        },
        "/api/pvlt/1.0/system/confvar": {
            "delete": {
                "operationId": "clear-all-conf-vars",
                "summary": "Clear configuration variables",
                "description": "Clears all dynamic configuration variables.\n\n:::note\nThis API is unavailable in the hosted version of Vault. \n:::\n\nThe role performing this operation must have the `CapConfvarWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "responses": {
                    "200": {
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Config Vars"
                ]
            }
        },
        "/api/pvlt/1.0/system/confvar/{name}": {
            "get": {
                "operationId": "get-conf-var",
                "summary": "Get configuration variable",
                "description": "Gets a dynamic configuration variable by name. \n\n:::note\nThis API is unavailable in the hosted version of Vault. \n:::\n\nThe variables that can be obtained are:\n\n- `log_level`\n\nThe role that performs this operation must have the `CapConfvarReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "parameters": [
                    {
                        "description": "The name of the configuration variable.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfVar"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Config Vars"
                ]
            },
            "post": {
                "operationId": "set-conf-var",
                "summary": "Set configuration variable",
                "description": "Sets a dynamic configuration variable by name. \n\n:::note\nThis API is unavailable in the hosted version of Vault. \n:::\n\nThe variables that can be set are:\n\n- `log_level` which can take the values of `debug`, `info`, `warn`, and `error`.\n\nThe role that performs this operation must have the `CapConfvarWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "parameters": [
                    {
                        "description": "The name of the configuration variable.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "x-has-pii": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfVarValue"
                            }
                        }
                    },
                    "description": "Value of the configuration.",
                    "required": true,
                    "x-originalParamName": "value"
                },
                "responses": {
                    "200": {
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Config Vars"
                ]
            }
        },
        "/api/pvlt/1.0/system/info/kms": {
            "get": {
                "operationId": "get-kms",
                "summary": "Get KMS status",
                "description": "Gets the status of the configured KMS.\n\nThe role that performs this operation must have the `CapKMSReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KMSStatusResponse"
                                }
                            }
                        },
                        "description": "The request is successful."
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "405": {
                        "$ref": "#/components/responses/405"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    },
                    "503": {
                        "$ref": "#/components/responses/503"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "System"
                ]
            }
        }
    },
    "components": {
        "parameters": {
            "jsonOrPvSchemaFormat": {
                "description": "The format of the response. Overrides any `Accept` header value provided.",
                "in": "query",
                "name": "format",
                "schema": {
                    "type": "string",
                    "enum": [
                        "pvschema",
                        "json"
                    ],
                    "default": "json"
                }
            },
            "bundle_name": {
                "in": "path",
                "name": "bundle",
                "required": true,
                "schema": {
                    "description": "The name of a bundle.",
                    "type": "string",
                    "maxLength": 450,
                    "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
                    "example": "bundle"
                }
            },
            "collection_name": {
                "in": "path",
                "name": "collection",
                "required": true,
                "schema": {
                    "description": "The name of a collection.",
                    "type": "string",
                    "maxLength": 40,
                    "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
                    "example": "customers"
                }
            },
            "type_name": {
                "in": "path",
                "name": "type",
                "required": true,
                "schema": {
                    "description": "The name of a data type.",
                    "type": "string",
                    "maxLength": 450,
                    "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
                    "example": "STRING"
                }
            },
            "page_size": {
                "description": "The maximum number of items to return in this request. If not specified, the default value is used. The default value is specified in the [`PVAULT_SERVICE_DEFAULT_PAGE_SIZE` environment variable](/guides/configure/environment-variables#service-and-features). Must not exceed the value specified in the [`PVAULT_SERVICE_MAX_PAGE_SIZE` environment variable](/guides/configure/environment-variables#service-and-features).",
                "in": "query",
                "name": "page_size",
                "schema": {
                    "type": "integer",
                    "minimum": 0,
                    "exclusiveMinimum": true
                }
            },
            "cursor": {
                "description": "The cursor represents the state of consecutive queries for the same request parameters. In the first call, the cursor may be omitted or specified as an empty string. In consecutive calls, it should be set to the value of the cursor field of the objectFieldsPage returned by the previous call. Note: when the `id` is specified, paging is not supported. In this case, if the number of `id` values specified exceeds the maximum page size, the method returns 400 (BAD REQUEST).",
                "in": "query",
                "name": "cursor",
                "allowEmptyValue": true,
                "schema": {
                    "type": "string"
                }
            },
            "adhoc_reason": {
                "name": "adhoc_reason",
                "description": "An ad-hoc reason for accessing the Vault data. Required when `reason` is set to `Other`.",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            "reason": {
                "name": "reason",
                "description": "Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.",
                "in": "query",
                "required": true,
                "schema": {
                    "enum": [
                        "AppFunctionality",
                        "Analytics",
                        "Notifications",
                        "Marketing",
                        "ThirdPartyMarketing",
                        "FraudPreventionSecurityAndCompliance",
                        "AccountManagement",
                        "Maintenance",
                        "DataSubjectRequest",
                        "Other"
                    ],
                    "type": "string"
                },
                "example": "Maintenance"
            },
            "reload_cache": {
                "name": "reload_cache",
                "description": "Reloads the cache before the action.",
                "in": "query",
                "schema": {
                    "type": "boolean"
                }
            },
            "trans_param": {
                "name": "X-Trans-Param",
                "description": "Extra parameter to pass on to the transformers.",
                "in": "header",
                "schema": {
                    "type": "string"
                }
            },
            "transaction_id": {
                "name": "transaction_id",
                "description": "The transaction ID to attach to the token.",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            "export": {
                "name": "export",
                "description": "Whether to encrypt the property values for export.",
                "in": "query",
                "schema": {
                    "type": "boolean"
                }
            },
            "import": {
                "name": "import",
                "description": "Whether to write built-in property values.",
                "in": "query",
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "export_key": {
                "name": "export_key",
                "description": "The key to decrypt property values. Can be provided only when `import` is `true`.",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            "props": {
                "description": "The list of property names and transformations. To include multiple names and transformations, provide a comma-separated list. For example, `props=first_name,last_name,email.mask`.",
                "in": "query",
                "name": "props",
                "schema": {
                    "type": "array",
                    "items": {
                        "description": "The name of a property or a transformation in the format `<property-name>.<transformer-name>`.",
                        "type": "string",
                        "example": "ssn.mask"
                    }
                }
            }
        },
        "responses": {
            "400": {
                "description": "The request is invalid.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/rest.HTTPError"
                        },
                        "example": {
                            "error_code": "PV1001",
                            "message": "The access reason is missing.",
                            "context": {
                                "reason": null
                            }
                        }
                    }
                }
            },
            "401": {
                "description": "Authentication credentials are incorrect or missing.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/rest.HTTPError"
                        },
                        "example": {
                            "error_code": "PV1005",
                            "message": "The request is unauthorized.",
                            "context": {}
                        }
                    }
                }
            },
            "403": {
                "description": "The caller doesn't have the required access rights.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/rest.HTTPError"
                        },
                        "example": {
                            "error_code": "PV1007",
                            "message": "The operation is forbidden due to missing capabilities.",
                            "context": {
                                "username": "WebServer"
                            }
                        }
                    }
                }
            },
            "404": {
                "description": "The requested resource is not found.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/rest.HTTPError"
                        },
                        "example": {
                            "error_code": "PV1004",
                            "message": "The collection is not found.",
                            "context": {}
                        }
                    }
                }
            },
            "405": {
                "description": "The operation is not allowed.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/rest.HTTPError"
                        },
                        "example": {
                            "error_code": "PV1026",
                            "message": "The operation is not allowed in in-memory mode.",
                            "context": {}
                        }
                    }
                }
            },
            "409": {
                "description": "A conflict occurs.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/rest.HTTPError"
                        },
                        "example": {
                            "error_code": "PV3218",
                            "message": "Concurrent conflicting updates to the same object.",
                            "context": {}
                        }
                    }
                }
            },
            "410": {
                "description": "Access to a resource that is no longer available occurs.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/rest.HTTPError"
                        },
                        "example": {
                            "error_code": "PV1033",
                            "message": "The resource is gone.",
                            "context": {}
                        }
                    }
                }
            },
            "500": {
                "description": "An error occurs on the server.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/rest.HTTPError"
                        },
                        "example": {
                            "error_code": "PV1000",
                            "message": "Something went wrong",
                            "context": {}
                        }
                    }
                }
            },
            "501": {
                "description": "Not implemented.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/rest.HTTPError"
                        },
                        "example": {
                            "error_code": "PV2001",
                            "message": "This operation is not implemented.",
                            "context": {}
                        }
                    }
                }
            },
            "503": {
                "description": "The service is unavailable.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/rest.HTTPError"
                        },
                        "example": {
                            "error_code": "PV1009",
                            "message": "The operation timed out on the server.",
                            "context": {}
                        }
                    }
                }
            },
            "Bulk200Response": {
                "description": "The bulk operation is successful.\nThis status doesn't indicate that the operation is successful for all objects.\nCheck the response body for details of the status of each object.\n",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/BulkObjectResponse"
                        }
                    }
                }
            }
        },
        "schemas": {
            "ObjectID": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "UserName": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "IAMConfig": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "policies": {
                        "type": "object",
                        "default": {},
                        "additionalProperties": {
                            "$ref": "#/components/schemas/Policy"
                        }
                    },
                    "roles": {
                        "type": "object",
                        "default": {},
                        "additionalProperties": {
                            "$ref": "#/components/schemas/Role"
                        }
                    },
                    "users": {
                        "type": "object",
                        "default": {},
                        "additionalProperties": {
                            "$ref": "#/components/schemas/User"
                        }
                    }
                }
            },
            "Policy": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "operations": {
                        "type": "array",
                        "default": [],
                        "items": {
                            "type": "string"
                        }
                    },
                    "policy_type": {
                        "type": "string"
                    },
                    "reasons": {
                        "type": "array",
                        "default": [],
                        "items": {
                            "type": "string"
                        }
                    },
                    "resources": {
                        "type": "array",
                        "default": [],
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "policy_type"
                ]
            },
            "Role": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "capabilities": {
                        "type": "array",
                        "default": [],
                        "items": {
                            "type": "string"
                        }
                    },
                    "policies": {
                        "type": "array",
                        "default": [],
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "User": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "disabled": {
                        "type": "boolean",
                        "default": false
                    },
                    "role": {
                        "type": "string"
                    }
                },
                "required": [
                    "role"
                ]
            },
            "Config": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "db": {
                        "$ref": "#/components/schemas/DBConfig"
                    },
                    "devmode": {
                        "type": "boolean"
                    },
                    "backing_store": {
                        "type": "string"
                    },
                    "generate_secrets": {
                        "type": "boolean"
                    },
                    "features": {
                        "$ref": "#/components/schemas/FeaturesConfig"
                    },
                    "kms": {
                        "$ref": "#/components/schemas/KMSConfig"
                    },
                    "log": {
                        "$ref": "#/components/schemas/LogConfig"
                    },
                    "sentry": {
                        "$ref": "#/components/schemas/SentryConfig"
                    },
                    "service": {
                        "$ref": "#/components/schemas/ServiceConfig"
                    },
                    "tls": {
                        "$ref": "#/components/schemas/TLSConfig"
                    },
                    "expiration": {
                        "$ref": "#/components/schemas/ExpirationConfig"
                    }
                },
                "required": [
                    "db",
                    "devmode",
                    "features",
                    "kms",
                    "log",
                    "sentry",
                    "service",
                    "tls",
                    "expiration"
                ]
            },
            "DBConfig": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "conn_max_lifetime_minutes": {
                        "type": "integer"
                    },
                    "gc": {
                        "$ref": "#/components/schemas/PrunerConfig"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "max_idle_conns": {
                        "type": "integer"
                    },
                    "max_open_conns": {
                        "type": "integer"
                    },
                    "max_string_length": {
                        "type": "integer"
                    },
                    "max_blob_length": {
                        "type": "integer"
                    },
                    "max_token_tags": {
                        "type": "integer",
                        "maximum": 200,
                        "minimum": 1
                    },
                    "migration": {
                        "$ref": "#/components/schemas/MigrationConfig"
                    },
                    "name": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "port": {
                        "type": "integer"
                    },
                    "require_tls": {
                        "type": "boolean"
                    },
                    "trace_sql": {
                        "type": "boolean"
                    },
                    "user": {
                        "type": "string"
                    }
                },
                "required": [
                    "conn_max_lifetime_minutes",
                    "gc",
                    "hostname",
                    "max_idle_conns",
                    "max_open_conns",
                    "migration",
                    "name",
                    "password",
                    "port",
                    "require_tls",
                    "trace_sql",
                    "user"
                ]
            },
            "FeaturesConfig": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "encryption": {
                        "type": "boolean"
                    },
                    "mask_license": {
                        "type": "boolean"
                    },
                    "disable_javascript": {
                        "type": "boolean"
                    },
                    "anti_tampering": {
                        "type": "string",
                        "enum": [
                            "off",
                            "log",
                            "enforce"
                        ]
                    }
                },
                "required": [
                    "encryption",
                    "mask_license",
                    "disable_javascript"
                ]
            },
            "PrunerConfig": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "batch_size": {
                        "type": "integer"
                    },
                    "retention_period": {
                        "type": "integer"
                    }
                },
                "required": [
                    "batch_size",
                    "retention_period"
                ]
            },
            "KMSConfig": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "seed": {
                        "type": "string"
                    },
                    "uri": {
                        "type": "string"
                    },
                    "export_seed": {
                        "type": "string"
                    },
                    "export_uri": {
                        "type": "string"
                    },
                    "allow_local": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "seed",
                    "uri",
                    "export_seed",
                    "export_uri",
                    "allow_local"
                ]
            },
            "LogConfig": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "customer_env": {
                        "type": "string"
                    },
                    "customer_identifier": {
                        "type": "string"
                    },
                    "datadog_enable": {
                        "type": "string"
                    },
                    "level": {
                        "type": "string"
                    },
                    "audit_enable": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "customer_env",
                    "customer_identifier",
                    "datadog_enable",
                    "level",
                    "audit_enable"
                ]
            },
            "MigrationConfig": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "auto_run": {
                        "type": "boolean"
                    },
                    "enable_retries": {
                        "type": "boolean"
                    },
                    "initial_wait_between_retries": {
                        "type": "integer"
                    },
                    "max_retries": {
                        "type": "integer"
                    },
                    "max_wait_between_retries": {
                        "type": "integer"
                    }
                },
                "required": [
                    "auto_run",
                    "enable_retries",
                    "initial_wait_between_retries",
                    "max_retries",
                    "max_wait_between_retries"
                ]
            },
            "SentryConfig": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "enable": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "enable"
                ]
            },
            "ServiceConfig": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "admin_api_key": {
                        "type": "string"
                    },
                    "admin_may_read_data": {
                        "type": "boolean"
                    },
                    "default_page_size": {
                        "type": "integer"
                    },
                    "set_iam_on_start_only": {
                        "type": "boolean"
                    },
                    "update_schema_on_start": {
                        "type": "boolean"
                    },
                    "force_access_reason": {
                        "type": "boolean"
                    },
                    "listen_addr": {
                        "type": "string"
                    },
                    "max_page_size": {
                        "type": "integer"
                    },
                    "max_pagination_remaining_count": {
                        "type": "integer"
                    },
                    "timeout_seconds": {
                        "type": "number"
                    },
                    "cache_refresh_interval": {
                        "type": "integer"
                    },
                    "archive_prune_interval": {
                        "type": "integer"
                    },
                    "license": {
                        "type": "string"
                    }
                },
                "required": [
                    "admin_api_key",
                    "admin_may_read_data",
                    "default_page_size",
                    "force_access_reason",
                    "listen_addr",
                    "max_page_size",
                    "timeout_seconds",
                    "cache_refresh_interval",
                    "archive_prune_interval",
                    "license"
                ]
            },
            "TLSConfig": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "cert_file": {
                        "type": "string"
                    },
                    "enable": {
                        "type": "boolean"
                    },
                    "key_file": {
                        "type": "string"
                    },
                    "selfsigned": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "cert_file",
                    "enable",
                    "key_file",
                    "selfsigned"
                ]
            },
            "ExpirationConfig": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "associated_objects": {
                        "type": "integer"
                    },
                    "tokens": {
                        "type": "integer"
                    },
                    "unassociated_objects": {
                        "type": "integer"
                    }
                },
                "required": [
                    "associated_objects",
                    "tokens",
                    "unassociated_objects"
                ]
            },
            "DeletionCount": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "collection_name": {
                        "type": "string",
                        "description": "The name of the collection containing the objects or tokens to delete.",
                        "example": "Tokens"
                    },
                    "collection_type": {
                        "type": "string",
                        "description": "The type of the collection.",
                        "example": "TOKENS",
                        "enum": [
                            "DATA",
                            "PERSONS",
                            "TOKENS"
                        ]
                    },
                    "count": {
                        "type": "integer",
                        "description": "The number of items deleted.",
                        "example": 634
                    }
                },
                "required": [
                    "collection_name",
                    "collection_type",
                    "count"
                ]
            },
            "Collection": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "creation_time": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time when the collection was created, in RFC3339Nano format.\nVault sets this value automatically.\nSending a value for this field is ignored.\n",
                        "example": "2022-07-05T08:47:12.041234Z"
                    },
                    "modification_time": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time when the collection was last modified, in RFC3339Nano format.\nVault sets this value automatically.\nSending a value for this field is ignored.\n",
                        "example": "2022-07-05T08:47:12.041234Z"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CollectionName"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Property"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "The schema prototype the collection is based on.",
                        "enum": [
                            "PERSONS",
                            "DATA"
                        ]
                    }
                },
                "example": {
                    "type": "PERSONS",
                    "name": "customers",
                    "properties": [
                        {
                            "description": "Date of birth",
                            "name": "date_of_birth",
                            "data_type_name": "DATE_OF_BIRTH",
                            "is_nullable": true
                        },
                        {
                            "description": "Email",
                            "name": "email",
                            "data_type_name": "EMAIL",
                            "is_unique": true,
                            "is_index": true,
                            "is_nullable": true
                        },
                        {
                            "description": "First name",
                            "name": "first_name",
                            "data_type_name": "NAME"
                        },
                        {
                            "description": "Last name",
                            "name": "last_name",
                            "data_type_name": "NAME"
                        },
                        {
                            "description": "Phone number",
                            "name": "phone_number",
                            "data_type_name": "PHONE_NUMBER",
                            "is_unique": true,
                            "is_index": true,
                            "is_nullable": true
                        }
                    ]
                },
                "required": [
                    "name",
                    "properties",
                    "type"
                ]
            },
            "Collection.pvschema": {
                "type": "string",
                "example": "customers PERSONS (\ndate_of_birth DATE_OF_BIRTH NULL COMMENT 'Date of birth',\nemail EMAIL NULL UNIQUE INDEX COMMENT 'Email',\nfirst_name NAME COMMENT 'First name',\nlast_name NAME COMMENT 'Last name',\nphone_number PHONE_NUMBER NULL UNIQUE INDEX COMMENT 'Phone number',\n);"
            },
            "ConfVar": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "description": "The name of the configuration variable.",
                        "example": "log_level",
                        "type": "string"
                    },
                    "value": {
                        "description": "The value of the configuration variable."
                    },
                    "default_value": {
                        "description": "The default value of the configuration variable."
                    }
                },
                "required": [
                    "name",
                    "value",
                    "default_value"
                ]
            },
            "License": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "key": {
                        "description": "The full license activation key.",
                        "type": "string"
                    },
                    "expiration": {
                        "description": "The expiration date of the token in an RFC3339Nano format.",
                        "example": "2022-07-05T08:47:12.041234Z",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "key",
                    "expiration"
                ]
            },
            "ConfVarValue": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "value": {
                        "type": "string",
                        "description": "The value of the configuration variable."
                    }
                },
                "required": [
                    "value"
                ]
            },
            "LicenseKey": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The license key."
                    }
                },
                "required": [
                    "key"
                ]
            },
            "DetokenizedToken": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "fields": {
                        "$ref": "#/components/schemas/ObjectFields"
                    },
                    "token_id": {
                        "description": "The token ID.",
                        "type": "string",
                        "example": "49303e72-35e3-11ed-a261-0242ac120002"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/TokenMetadata"
                    }
                },
                "required": [
                    "fields",
                    "token_id"
                ]
            },
            "Health": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "status": {
                        "description": "The status of the service.",
                        "example": "pass",
                        "type": "string"
                    }
                },
                "required": [
                    "status"
                ]
            },
            "KMSStatusResponse": {
                "description": "The status and type of the default KMS and the KMS for export.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "kms": {
                        "$ref": "#/components/schemas/KMSStatus"
                    },
                    "kms_export": {
                        "$ref": "#/components/schemas/KMSStatus"
                    }
                },
                "required": [
                    "kms"
                ]
            },
            "KMSStatus": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "status": {
                        "description": "The status of the KMS.",
                        "type": "string",
                        "enum": [
                            "pass",
                            "fail"
                        ],
                        "example": "pass"
                    },
                    "type": {
                        "description": "The type of the KMS.",
                        "type": "string",
                        "enum": [
                            "GCP",
                            "AWS",
                            "LOCAL"
                        ],
                        "example": "AWS"
                    }
                },
                "required": [
                    "status",
                    "type"
                ]
            },
            "Count": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "active": {
                        "description": "Number of active items.",
                        "example": 10,
                        "type": "integer"
                    },
                    "archived": {
                        "description": "Number of archived items.",
                        "example": 15,
                        "type": "integer"
                    },
                    "total": {
                        "description": "Number of total items.",
                        "example": 25,
                        "type": "integer"
                    }
                },
                "required": [
                    "active",
                    "archived",
                    "total"
                ],
                "example": {
                    "active": 10,
                    "archived": 15,
                    "total": 25
                }
            },
            "ObjectFields": {
                "description": "A list of maps of object properties and their values.",
                "type": "object",
                "example": {
                    "date_of_birth": "1993-02-22",
                    "email": "patfar@example.com",
                    "first_name": "Pat",
                    "last_name": "Far",
                    "phone_number": "+11011010101"
                },
                "additionalProperties": true
            },
            "ObjectFieldsPage": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "results": {
                        "description": "The page objects.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ObjectFields"
                        }
                    },
                    "paging": {
                        "$ref": "#/components/schemas/Paging"
                    }
                },
                "required": [
                    "results",
                    "paging"
                ]
            },
            "Paging": {
                "description": "Pagination information.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "size": {
                        "type": "integer",
                        "description": "Number of results in the current page."
                    },
                    "remaining_count": {
                        "type": "integer",
                        "description": "The remaining number of objects that can be read in ensuing calls to this method."
                    },
                    "cursor": {
                        "type": "string",
                        "description": "An opaque string you should provide to get the next page."
                    }
                },
                "required": [
                    "size",
                    "remaining_count",
                    "cursor"
                ]
            },
            "ProductVersion": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "db_schema_version": {
                        "type": "integer"
                    },
                    "vault_id": {
                        "example": 1525298622245192000,
                        "type": "string"
                    },
                    "vault_version": {
                        "description": "The version of a Vault specified as a string consisting of version number, build number, and edition.",
                        "example": "0.9.5.1-g2be0eb7e",
                        "type": "string"
                    }
                },
                "required": [
                    "db_schema_version",
                    "vault_id",
                    "vault_version"
                ]
            },
            "Property": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "creation_time": {
                        "description": "The time when the property was created, in RFC3339Nano format.\nVault sets this value automatically.\nSending a value for this field is ignored.\n",
                        "example": "2022-07-05T08:47:12.041234Z",
                        "type": "string",
                        "format": "date-time"
                    },
                    "modification_time": {
                        "description": "The time when the property was last modified, in RFC3339 format.\nVault sets this value automatically.\nSending a value for this field is ignored.\n",
                        "example": "2022-07-05T08:47:12.047Z",
                        "type": "string",
                        "format": "date-time"
                    },
                    "description": {
                        "$ref": "#/components/schemas/Description"
                    },
                    "is_builtin": {
                        "default": false,
                        "description": "Whether the property is created by Vault (or by the user).\nBuilt-in properties cannot be deleted or modified.\nSending a value for this field is ignored.\n",
                        "example": false,
                        "type": "boolean"
                    },
                    "is_encrypted": {
                        "default": true,
                        "description": "Whether the value is stored encrypted.",
                        "example": true,
                        "type": "boolean"
                    },
                    "is_index": {
                        "default": false,
                        "description": "Whether the backend storage is optimized for searches on this property. Cannot be set to `true` for properties with data types `LONG_TEXT`, `JSON`, or `BLOB`, or custom data types based on those types.",
                        "example": false,
                        "type": "boolean"
                    },
                    "is_nullable": {
                        "default": false,
                        "description": "Whether the value of the property can be removed (set to null).",
                        "example": false,
                        "type": "boolean"
                    },
                    "is_readonly": {
                        "default": false,
                        "description": "Whether the user can modify values of this property.\nIgnored for user define properties.\nSending a value for this field is ignored.\n",
                        "example": false,
                        "type": "boolean"
                    },
                    "is_unique": {
                        "default": false,
                        "description": "Whether the backend storage enforces unique values for active objects. Cannot be set to `true` for properties with data types `LONG_TEXT`, `JSON`, or `BLOB`, or custom data types based on those types.",
                        "example": false,
                        "type": "boolean"
                    },
                    "name": {
                        "$ref": "#/components/schemas/PropertyName"
                    },
                    "data_type_name": {
                        "$ref": "#/components/schemas/DataTypeName"
                    }
                },
                "required": [
                    "name",
                    "data_type_name"
                ]
            },
            "UpdatePropertyRequest": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "description": {
                        "description": "The description of the property. If not provided, is set to an empty `string`.",
                        "type": "string",
                        "example": "The name of the customer."
                    },
                    "is_index": {
                        "description": "Whether the backend storage is optimized for searches on this property.",
                        "type": "boolean",
                        "example": false
                    },
                    "is_nullable": {
                        "description": "Whether this property can have no value.",
                        "type": "boolean",
                        "example": false
                    }
                }
            },
            "Query": {
                "type": "object",
                "description": "A query is a map of operators to match against the properties of an object.\n\nMultiple operators can be combined in a single query.\n",
                "additionalProperties": false,
                "properties": {
                    "in": {
                        "$ref": "#/components/schemas/InMap"
                    },
                    "match": {
                        "$ref": "#/components/schemas/MatchMap"
                    }
                },
                "minProperties": 1
            },
            "InMap": {
                "type": "object",
                "description": "The `in` query operator allows you to match a property value against a list of values.\n\nEach key in the map is a property name, and the value is a list of values to match.\n\nThe SQL equivalent of this query is:\n\n```sql\nSELECT * FROM objects WHERE property1 IN (value1, value2) AND property2 IN (value1, value2);\n```\n",
                "additionalProperties": {
                    "type": "array",
                    "items": {
                        "description": "A value to match. Must be of the same type as the property.",
                        "nullable": true
                    }
                }
            },
            "MatchMap": {
                "type": "object",
                "description": "The `match` query operator allows you to match a property value against a specific value.\n\nEach key in the map is a property name, and the value is the value to match.\n\nThe SQL equivalent of this query is:\n\n```sql\nSELECT * FROM objects WHERE property1 = value1 AND property2 = value2;\n```\n",
                "additionalProperties": {
                    "description": "A value to match. Must be of the same type as the property.",
                    "nullable": true
                }
            },
            "QueryToken": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "object_ids": {
                        "description": "Comma-separated list of object IDs.",
                        "items": {
                            "type": "string",
                            "format": "uuid",
                            "example": "463a83d0-a816-4902-abba-2486e0c0a0bb"
                        },
                        "type": "array"
                    },
                    "token_ids": {
                        "description": "Comma-separated list of token IDs.",
                        "items": {
                            "type": "string",
                            "example": "49303e72-35e3-11ed-a261-0242ac120002"
                        },
                        "type": "array"
                    },
                    "tags": {
                        "description": "Comma-separated list of tags.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    }
                }
            },
            "RotatedTokens": {
                "type": "object",
                "description": "Mapping between old token IDs and new token IDs.",
                "example": {
                    "49303e72-35e3-11ed-a261-0242ac120002": "463a83d0-a816-4902-abba-2486e0c0a0bb"
                },
                "additionalProperties": {
                    "type": "string"
                }
            },
            "TokenAggregatedMetadata": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "max_effective_expiration_time": {
                        "description": "Latest expiry of all tokens with the token ID (UTC).",
                        "type": "string",
                        "nullable": true,
                        "format": "date-time"
                    }
                }
            },
            "TokenMetadata": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "agg": {
                        "$ref": "#/components/schemas/TokenAggregatedMetadata"
                    },
                    "type": {
                        "$ref": "#/components/schemas/TokenType"
                    },
                    "scope": {
                        "description": "The scope of the tokens.",
                        "type": "string",
                        "example": "default"
                    },
                    "token_id": {
                        "description": "The shared ID of the tokens.",
                        "type": "string",
                        "example": "49303e72-35e3-11ed-a261-0242ac120002"
                    },
                    "tokens": {
                        "description": "The metadata for each token.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TokenRefMetadata"
                        }
                    }
                },
                "required": [
                    "agg",
                    "type",
                    "scope",
                    "token_id",
                    "tokens"
                ]
            },
            "TokenRefMetadata": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "creation_time": {
                        "description": "Creation time of the token (UTC).",
                        "type": "string",
                        "format": "date-time"
                    },
                    "effective_expiration_time": {
                        "description": "Effective expiry time of the token (UTC), being the earliest of the expiry time of the token or the object owning the token, if any.",
                        "type": "string",
                        "nullable": true,
                        "format": "date-time"
                    },
                    "expiration_time": {
                        "description": "Expiry time of the token (UTC).",
                        "type": "string",
                        "nullable": true,
                        "format": "date-time"
                    },
                    "object_id": {
                        "description": "The object this token is for.",
                        "type": "string",
                        "format": "uuid"
                    },
                    "tags": {
                        "description": "Tags associated with the token.\nWhen token ID is reused, this is all the tags from the tokens that share the ID.\n",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    }
                },
                "required": [
                    "creation_time",
                    "effective_expiration_time",
                    "expiration_time",
                    "tags"
                ]
            },
            "TokenType": {
                "description": "The type of the token:\n- `deterministic` - token that is assigned a deterministic ID based on the collection, tokenized object, property values, and scope.\n- `pci` â€“ token that represent property values as they were when the token was created. The token ID reuses the ID of an existing token where both tokens are created on the same collection with the same values and scope. Otherwise, the token ID is randomly assigned.\n- `pci_oneway` â€“ PCI token that cannot be detokenized.\n- `pointer` â€“ token that represent the property values as they are when the request to detokenize is made.\n- `randomized` â€“ token that represent the property values as they were when the token was created. Unlike PCI tokens, for non-format preserving tokens, these tokens are always assigned a unique ID.\n",
                "type": "string",
                "enum": [
                    "pci",
                    "pci_oneway",
                    "pointer",
                    "randomized",
                    "deterministic"
                ]
            },
            "TokenValue": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "token_id": {
                        "description": "The ID of the token.",
                        "type": "string",
                        "example": "de15a638-354a-11ed-a261-0242ac120002"
                    },
                    "object_id": {
                        "description": "The ID of the newly added object, applicable for tokenizing with store_object is true.",
                        "type": "string",
                        "format": "uuid",
                        "example": "cc9a39c5-4734-4786-b317-e16705d5128f"
                    }
                },
                "required": [
                    "token_id"
                ]
            },
            "TokenizeRequest": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/TokenType"
                    },
                    "object": {
                        "$ref": "#/components/schemas/InputObject"
                    },
                    "props": {
                        "description": "A list of the properties to tokenize.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PropertyName"
                        }
                    },
                    "scope": {
                        "default": "default",
                        "description": "A classification for the token.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to attach to the token. Maximum 10.\n",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        },
                        "maximum": 10
                    },
                    "ensure_unique_tenant_tags": {
                        "description": "Tags to validate as unique in tenant scope. Must be subset of 'tags'.\n",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        },
                        "maximum": 10
                    },
                    "store_object": {
                        "description": "When `fields` is included in the request body, whether to store the property values as an object in the collection. The token is owned by the new object. Default is false.\n",
                        "type": "boolean"
                    },
                    "fpprops": {
                        "description": "Properties used by the format preserving template for the ID generation. The templates require these properties:\n- the `primary_account_number` template requires a property of type `CC_NUMBER`. The token ID is generated from this property by retaining the first six and last four digits and randomizing the remaining digits.\n",
                        "items": {
                            "type": "string",
                            "example": "credit_card_no"
                        },
                        "type": "array"
                    },
                    "fptemplate": {
                        "description": "The template used to format the generated ID. Supports: \n- `primary_account_number` that generates an ID that is a valid 16-digit PAN (credit card number).\nIf empty, the format of the ID is a UUID.\n",
                        "enum": [
                            "primary_account_number"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "object"
                ]
            },
            "EncryptionRequest": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/EncryptionType"
                    },
                    "object": {
                        "$ref": "#/components/schemas/InputObject"
                    },
                    "props": {
                        "description": "A list of the properties to include in the encrypted object.\nIf not provided, all properties are included, including the built-in properties, but omitting the object ID.\n",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PropertyName"
                        }
                    },
                    "scope": {
                        "default": "default",
                        "description": "A classification for the encrypted object that is added to the ciphertext as associated data (AAD).\nAn object encrypted with a scope can be decrypted only with the same scope.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to attach to the metadata of the encrypted object.\nThe maximum number of allowed tags is defined by the [`PVAULT_DB_MAX_TOKEN_TAGS` environment variable](/guides/configure/environment-variables#database) (default 10).\nTags are not supported for the `deterministic` encryption type.\n",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        },
                        "maximum": 10
                    }
                },
                "required": [
                    "object"
                ]
            },
            "UpdateEncryptionRequest": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/EncryptionType"
                    },
                    "encrypted_object": {
                        "$ref": "#/components/schemas/EncryptedObjectInput"
                    },
                    "fields": {
                        "$ref": "#/components/schemas/ObjectFields"
                    },
                    "props": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PropertyName"
                        },
                        "description": "The properties to include in the updated encrypted object."
                    },
                    "scope": {
                        "default": "default",
                        "description": "A classification for the updated encrypted object that is added to the ciphertext as associated data (AAD).\nAn object encrypted with a scope can be decrypted only with the same scope.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "encrypted_object",
                    "fields"
                ]
            },
            "EncryptionType": {
                "type": "string",
                "description": "The type of the encryption:\n- `randomized` - generates a different randomized unpredictable, non-repeating ciphertext each time.\n- `deterministic` - generates the ciphertext deterministically based on the collection name, input object, and scope.\nDefaults to `randomized` if not set.\n",
                "default": "randomized",
                "enum": [
                    "randomized",
                    "deterministic"
                ]
            },
            "EncryptedValue": {
                "type": "object",
                "properties": {
                    "ciphertext": {
                        "description": "The encrypted object is a base64 ciphertext of the request fields and built-in fields such as timestamps and expiration time.\nIt does not include the ID field.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "ciphertext"
                ]
            },
            "DecryptionRequest": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "encrypted_object": {
                        "$ref": "#/components/schemas/EncryptedObjectInput"
                    },
                    "props": {
                        "description": "The list of property names and transformers to include in the decrypted object. If not set, return all encrypted property values.\n",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "credit_card_no"
                        }
                    }
                },
                "required": [
                    "encrypted_object"
                ]
            },
            "DecryptedObject": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "fields": {
                        "$ref": "#/components/schemas/ObjectFields"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/EncryptedObjectMetadata"
                    }
                },
                "required": [
                    "fields"
                ]
            },
            "EncryptedObjectMetadata": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/EncryptionType"
                    },
                    "scope": {
                        "description": "The scope of the tokens.",
                        "type": "string",
                        "example": "default"
                    },
                    "expiration": {
                        "description": "Effective expiry time of the encrypted object (UTC).",
                        "type": "string",
                        "nullable": true,
                        "format": "date-time"
                    },
                    "tags": {
                        "description": "Tags associated with the encrypted object.\n",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    }
                },
                "required": [
                    "type",
                    "scope",
                    "tags"
                ]
            },
            "HashObjectRequest": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "object": {
                        "$ref": "#/components/schemas/InputObject"
                    },
                    "props": {
                        "description": "A list of the properties to tokenize.",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "credit_card_no"
                        }
                    },
                    "scope": {
                        "default": "default",
                        "description": "A classification for the hash.",
                        "type": "string"
                    },
                    "fpprops": {
                        "description": "Properties used by the format preserving template for the ID generation. The templates require these properties:\n- the `primary_account_number` template requires a property of type `CC_NUMBER`. The token ID is generated from this property by retaining the first six and last four digits and randomizing the remaining digits.\n",
                        "items": {
                            "type": "string",
                            "example": "credit_card_no"
                        },
                        "type": "array"
                    },
                    "fptemplate": {
                        "description": "The template used to format the generated ID. Supports: \n- `primary_account_number` that generates an ID that is a valid 16-digit PAN (credit card number).\nIf empty, the format of the ID is a UUID.\n",
                        "enum": [
                            "primary_account_number"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "object"
                ],
                "example": {
                    "object": {
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08"
                    },
                    "props": [
                        "phone_number"
                    ],
                    "scope": "default"
                }
            },
            "InputObject": {
                "description": "The input object, defined as one and only one of the following properties.\n- `id`: the ID of an object.\n- `fields`: property values of an object.\n- `encrypted`: an encrypted object.\n- `request_index`: the index of the object in the request array.\n\nIn stateless mode, `id` is not supported and either `fields` or `encrypted` must be supplied.\n",
                "type": "object",
                "minProperties": 1,
                "maxProperties": 1,
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "The ID of an object.",
                        "type": "string",
                        "format": "uuid"
                    },
                    "fields": {
                        "$ref": "#/components/schemas/ObjectFields"
                    },
                    "encrypted": {
                        "$ref": "#/components/schemas/EncryptedObjectInput"
                    },
                    "request_index": {
                        "description": "The index of the object in the request array.",
                        "type": "integer",
                        "minimum": 0
                    }
                }
            },
            "EncryptedObjectInput": {
                "description": "An encrypted object.",
                "additionalProperties": false,
                "type": "object",
                "properties": {
                    "ciphertext": {
                        "description": "The encrypted object base64 cipher text.",
                        "type": "string"
                    },
                    "scope": {
                        "description": "The scope used to encrypt the object. By default, it uses the scope of the encrypted object.",
                        "type": "string"
                    }
                },
                "required": [
                    "ciphertext"
                ]
            },
            "UpdateTokenRequest": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "tags": {
                        "description": "Replacement tags for the tokens.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        },
                        "maximum": 10
                    }
                }
            },
            "Tag": {
                "type": "string",
                "example": "credit_cards",
                "maxLength": 256
            },
            "TransactionID": {
                "type": "object",
                "description": "The list of referenced token IDs.",
                "additionalProperties": false,
                "properties": {
                    "ref_ids": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "The ID of a referenced token.",
                            "example": "de15a638-354a-11ed-a261-0242ac120002"
                        }
                    }
                },
                "required": [
                    "token_id"
                ]
            },
            "Bundle": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PartialBundle"
                    },
                    {
                        "properties": {
                            "name": {
                                "$ref": "#/components/schemas/BundleName"
                            },
                            "exports": {
                                "$ref": "#/components/schemas/BundleExports"
                            },
                            "creation_time": {
                                "description": "The time when the bundle was created.",
                                "type": "string",
                                "format": "date-time",
                                "example": "2022-07-05T08:47:12.047Z",
                                "readOnly": true
                            }
                        },
                        "required": [
                            "name",
                            "code"
                        ]
                    }
                ]
            },
            "PartialBundle": {
                "type": "object",
                "properties": {
                    "description": {
                        "$ref": "#/components/schemas/Description"
                    },
                    "code": {
                        "type": "string",
                        "format": "byte",
                        "description": "A byte[] containing a self-contained JavaScript code snippet."
                    }
                },
                "minProperties": 1
            },
            "BundleExports": {
                "description": "the functions exported by the bundle.",
                "type": "object",
                "readOnly": true,
                "properties": {
                    "validators": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FunctionPrototype"
                        },
                        "description": "The list of validators."
                    },
                    "normalizers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FunctionPrototype"
                        },
                        "description": "The list of normalizers."
                    },
                    "transformers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FunctionPrototype"
                        },
                        "description": "The list of transformers."
                    }
                }
            },
            "FunctionPrototype": {
                "type": "object",
                "properties": {
                    "name": {
                        "$ref": "#/components/schemas/JavaScriptFunctionName"
                    },
                    "type": {
                        "$ref": "#/components/schemas/FunctionType"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description of the function"
                    },
                    "dependencies": {
                        "$ref": "#/components/schemas/Dependencies"
                    }
                },
                "required": [
                    "name",
                    "type"
                ]
            },
            "Dependencies": {
                "description": "The list of dependencies of the function on the invocation context.",
                "type": "object",
                "properties": {
                    "properties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of glob strings indicating which property values of the object should be provided in the \"object\" argument."
                    },
                    "http_get_access": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of hosts that the function can call using the _httpGet method."
                    },
                    "http_post_access": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of hosts that the function can call using the _httpPost method."
                    }
                }
            },
            "FunctionType": {
                "type": "string",
                "enum": [
                    "transformer",
                    "validator",
                    "normalizer"
                ]
            },
            "DataType": {
                "description": "The data type and its function. default_transformer is the default transformer for the data type and should be taken from the transformers list.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "$ref": "#/components/schemas/DataTypeName"
                    },
                    "is_builtin": {
                        "type": "boolean",
                        "description": "Whether this data type is built-in or user defined."
                    },
                    "base_type_name": {
                        "$ref": "#/components/schemas/DataTypeName"
                    },
                    "description": {
                        "$ref": "#/components/schemas/Description"
                    },
                    "validator": {
                        "$ref": "#/components/schemas/FunctionName"
                    },
                    "normalizer": {
                        "$ref": "#/components/schemas/FunctionName"
                    },
                    "transformers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FunctionName"
                        },
                        "description": "The names of transformers that are supported for the data type."
                    },
                    "default_transformer": {
                        "$ref": "#/components/schemas/FunctionName"
                    },
                    "creation_time": {
                        "description": "The time when the data type was created.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-07-05T08:47:12.047Z",
                        "readOnly": true
                    }
                },
                "required": [
                    "name",
                    "base_type_name"
                ]
            },
            "UpdateDataTypeRequest": {
                "description": "The data type and its function. default_transformer is the default transformer for the data type and should be taken from the transformers list.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "custom_transformers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FunctionName"
                        },
                        "description": "The names of the custom transformers that are supported for the data type."
                    }
                },
                "minProperties": 1
            },
            "FunctionName": {
                "description": "The bundle and function name formatted as `<bundle-name>.<function-name>`.",
                "type": "string",
                "example": "bundle1.function1"
            },
            "AllGenerations": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "vault": {
                        "$ref": "#/components/schemas/VaultGeneration"
                    },
                    "workers": {
                        "description": "Workers generations.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Worker"
                        }
                    }
                },
                "required": [
                    "vault",
                    "workers"
                ]
            },
            "VaultGeneration": {
                "description": "Vault Generation.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "generation_number": {
                        "description": "Generation number.",
                        "type": "integer"
                    },
                    "modified_at": {
                        "description": "Modified at.",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "generation_number",
                    "modified_at"
                ]
            },
            "Worker": {
                "description": "Worker.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "worker_id": {
                        "description": "Worker id.",
                        "type": "integer"
                    },
                    "generation_number": {
                        "description": "Generation number.",
                        "type": "integer"
                    },
                    "generation_checked_at": {
                        "description": "Modified at.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "refresh_interval_seconds": {
                        "description": "Refresh interval in seconds.",
                        "type": "integer"
                    }
                },
                "required": [
                    "worker_id",
                    "generation_number",
                    "generation_checked_at",
                    "refresh_interval_seconds"
                ]
            },
            "APIKey": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "api_key": {
                        "description": "The new API key generated for the user.",
                        "example": "some_user",
                        "type": "string"
                    },
                    "api_key_expiry": {
                        "description": "The expiry time of the API key.",
                        "example": "2022-07-05T08:47:12.047Z",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "api_key",
                    "api_key_expiry"
                ]
            },
            "ExportKeyResponse": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "export_key": {
                        "description": "The key used to encrypt and decrypt exported data.",
                        "type": "string"
                    }
                },
                "required": [
                    "export_key"
                ]
            },
            "rest.HTTPError": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "context": {
                        "description": "The error context.",
                        "example": {
                            "objectid": "b56dd6aa-35f0-11ed-a261-0242ac120002"
                        },
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "error_code": {
                        "description": "The error code.",
                        "example": "PVxxxx",
                        "type": "string"
                    },
                    "message": {
                        "description": "The error message.",
                        "example": "The object is not found.",
                        "type": "string"
                    }
                },
                "required": [
                    "context",
                    "error_code",
                    "message"
                ]
            },
            "BulkObjectResponse": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "ok": {
                        "description": "Indicates whether the operation was completed successfully for all objects in the bulk operation.\nIf the operation failed for one or more of the provided objects, this property will be set to `false`.\n",
                        "type": "boolean",
                        "example": false
                    },
                    "results": {
                        "description": "An array of objects representing the processing result of each item in the bulk operation.\nThe order of the objects in the array will match the order of the objects in the request.\n",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BulkObjectResult"
                        }
                    }
                },
                "required": [
                    "ok",
                    "results"
                ]
            },
            "BulkObjectResult": {
                "description": "A result object representing the processing result of a single object in the bulk operation.\nEach result object includes the following fields:\n- `ok` field is a boolean that indicates whether the operation completed successfully for the object.\n- `id` field is the unique identifier for the processed object.\n   This field might be omitted if the operation failed before an `id` was assigned to the object. \n- `error` field is present when `ok` is `false` and provides more information about the error that occurred.\n   The `error` field follows the same structure as the [error objects](/api/status-codes#error-response-schema) returned in single object operations.\n",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "description": "The unique identifier for the object.",
                        "type": "string",
                        "format": "uuid"
                    },
                    "ok": {
                        "description": "Indicates whether the operation was completed successfully for this object.\nIf `true`, the operation completed successfully.\nIf `false`, the operation failed and the `error` field will contain more information.\n",
                        "type": "boolean",
                        "example": false
                    },
                    "error": {
                        "$ref": "#/components/schemas/rest.HTTPError"
                    }
                },
                "required": [
                    "ok"
                ]
            },
            "CollectionName": {
                "description": "The name of a collection.",
                "type": "string",
                "maxLength": 40,
                "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
                "example": "customers"
            },
            "PropertyName": {
                "description": "The name of a property.",
                "type": "string",
                "maxLength": 40,
                "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
                "example": "first_name"
            },
            "DataTypeName": {
                "description": "The name of a data type.",
                "type": "string",
                "maxLength": 450,
                "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
                "example": "STRING"
            },
            "BundleName": {
                "description": "The name of a bundle.",
                "type": "string",
                "maxLength": 450,
                "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
                "example": "bundle"
            },
            "JavaScriptFunctionName": {
                "description": "The name of a JavaScript function in a bundle.",
                "type": "string",
                "pattern": "^[a-zA-Z_$][a-zA-Z0-9_$]*$",
                "example": "to_upper"
            },
            "Description": {
                "description": "The description of a model.",
                "type": "string",
                "maxLength": 450
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "bearerFormat": "JWT",
                "scheme": "bearer",
                "type": "http",
                "description": "---\nsidebar_position: 2\nsidebar_label: Authentication\n---\n\n# Authenticate with a Bearer authorization header\n\nThe Piiano Vault REST API uses API keys to authenticate and authorize requests. It accepts Bearer tokens in the HTTP `Authorization` header using the `Bearer <api-key>` scheme.\n\nTo enable evaluation and testing, Vault ships with a default API key of `pvaultauth` for the admin user. See [Set the admin's API key](/guides/manage-users-and-policies/set-admin-api-key) for information on how to set a value for this key.\n\nTo obtain an API key for any other user, use the regenerate user API key [REST API operation](/api/operations/regenerate-user-api-key) or [CLI command](/cli/reference#regenerate-user-api-key).\n\nSee [Manage users and policies](/guides/manage-users-and-policies) to learn more about how Vault controls access to operations and data.\n"
            }
        }
    }
}