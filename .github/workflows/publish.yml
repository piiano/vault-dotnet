name: Publish
on:
  workflow_dispatch:
    inputs:
      vault_version:
        description: "Vault version"
        required: true
        type: string
      bump-package:
        description: |-
          How to bump this package version:
          - `none` - do not bump version
          - `patch` - bump patch version
          - `minor` - bump minor version
          - `major` - bump major version
        default: patch
        type: choice
        options:
          - none
          - patch
          - minor
          - major

jobs:
  bump-and-update:
    name: prepare, bump and publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.CICD_RELEASES_PAT }}

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
            dotnet-version: '7.0.x'

      - name: Install Nuget
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: nuget
          version: 1.0

      - name: Update README and resources to reference Vault version ${{ inputs.vault_version }}
        env:
          LINE: compatible with Vault version
        if: github.event_name == 'workflow_dispatch'
        run: |
          sed -i -E "s|$LINE [0-9]+\.[0-9]+\.[0-9]+|$LINE ${{ inputs.vault_version }}|g" Vault/README.md
          sed -i -E "s|VAULT_VERSION=[0-9]+\.[0-9]+\.[0-9]+|VAULT_VERSION=${{ inputs.vault_version }}|g" .env

      - name: Update README to reference SDK version upgrade ${{ inputs.bump-package }}
        id: sdk-ver
        if: github.event_name == 'workflow_dispatch' && inputs.bump-package != 'none'
        run: |
          LINE='> This package version is'
          CUR_VER=`sed -n "s/$LINE \([^ ]*\).*/\1/p" Vault/README.md`
          NEXT_VER=`npx --yes semver -i  ${{ inputs.bump-package }} ${CUR_VER}`
          sed -i -E "s|$LINE [0-9]+\.[0-9]+\.[0-9]+|$LINE $NEXT_VER|g" Vault/README.md
          echo "Replacing $CUR_VER with $NEXT_VER"
          sed -i -E "s|$CUR_VER|$NEXT_VER|g" Vault/Vault.csproj
          sed -i -E "s|$CUR_VER|$NEXT_VER|g" Vault.NuGetTests/Vault.NuGetTests.csproj
          echo "For debugging: should be replaced now"
          grep "1.0" Vault/Vault.csproj Vault.NuGetTests/Vault.NuGetTests.csproj
          echo "version=${NEXT_VER}" >>$GITHUB_OUTPUT

      - name: Build
        run: dotnet build Vault

      - name: Start Vault and run local tests
        run: |
          shopt -s expand_aliases
          . .env
          docker run --init --rm -d \
            --name pvault-dev \
            --add-host='host.docker.internal:host-gateway' \
            -p 8123:8123 \
            -e PVAULT_SERVICE_LICENSE=${PVAULT_SERVICE_LICENSE} \
            -e PVAULT_SENTRY_ENABLE=false \
            -e PVAULT_LOG_DATADOG_ENABLE=none \
            piiano/pvault-dev:${VAULT_VERSION}
          
          alias pvault="docker run --rm -i --add-host='host.docker.internal:host-gateway' -v $(pwd):/pwd -w /pwd piiano/pvault-cli:latest"
          until pvault status > /dev/null 2>&1
          do echo "Waiting for the vault to start ..." && sleep 1; done

          dotnet test Vault.Tests
        env:
          PVAULT_SERVICE_LICENSE: ${{ secrets.PVAULT_SERVICE_LICENSE }}

      - name: Push to Nuget
        run: |
          pwd
          echo "SDK version: ${{ steps.sdk-ver.outputs.version }}"
          find . -name ./Vault/bin/Debug/Piiano.Vault*.nupkg
          dotnet nuget push ./Vault/bin/Debug/Piiano.Vault.${{ steps.sdk-ver.outputs.version }}.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY}}

      - name: Commit and push changes
        # even though we're checking for workflow_dispatch we still want to be extra safe and
        # make sure we don't push changes to workflow that is triggered by push event.
        if: github.event_name == 'workflow_dispatch' && github.event_name != 'push'
        run: |
          git config --global user.email "cicd@piiano.com"
          git config --global user.name "Github Actions"
          git_status=$(git status -s)

          if [ -n "$git_status" ]; then
            echo "There are changes to commit"
            git add .env Vault/README.md Vault/Vault.csproj
            git commit -a -m 'Update README.md and .env files to Vault version ${{ inputs.vault_version }}'
            git push
          else
            echo "No changes to commit"
          fi

      - name: Verify the new package is available
        run: |
          published=none
          ver_expected="${{ steps.sdk-ver.outputs.version }}"
          for i in {1..10}; do
            online_package=$(nuget list Piiano.Vault)
            echo "Published: ${online_package}, Expecting: ${ver_expected}"
            published_ver=$(echo $online_package |  awk '{ print $2 }')
            if [ ${published_ver} != ${ver_expected} ] ; then
              echo "New version is not ready yet - attempt ${i}"
              sleep 60
            else
              echo "Package is published"
              published=done
              break
            fi
          done

          if [ ${published} = "none" ] ; then
            echo "Nuget package is not published yet. Bailing out."
            exit 1
          fi

      - name: Test the remote package
        env:
          PVAULT_SERVICE_LICENSE: ${{ secrets.PVAULT_SERVICE_LICENSE }}
        run: |
          set -x
          docker ps
          docker run --rm -i --add-host='host.docker.internal:host-gateway' piiano/pvault-cli:latest status
          dotnet clean Vault.NuGetTests
          dotnet build Vault.NuGetTests
          dotnet test Vault.NuGetTests

      - name: Stop Vault.
        run: docker stop pvault-dev
